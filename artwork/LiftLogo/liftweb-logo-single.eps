%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: liftweb-logo-single.pdf
%%Creator: Adobe Acrobat 8.0
%%For: timperrett
%%CreationDate: 19/8/08, 20:48:43
%%BoundingBox: 0 0 151 134
%%HiResBoundingBox: 0 0 150.3350 133.0560
%%CropBox: 0 0 150.3350 133.0560
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} (% &end XMP packet& %) ReadBypdfmark_5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:08:23">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xapG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
   dc:format="application/pdf"
   xap:CreatorTool="Adobe Illustrator CS3"
   xap:CreateDate="2008-08-19T20:24:15+01:00"
   xap:ModifyDate="2008-08-19T20:26:19+01:00"
   xap:MetadataDate="2008-08-19T20:26:19+01:00"
   xapMM:DocumentID="uuid:BBA20BB9BE6FDD11B98FE81F802C95AD"
   xapMM:InstanceID="uuid:65e305e6-b930-9446-a02e-c0b1a32398f6"
   xapTPg:NPages="1"
   xapTPg:HasVisibleTransparency="False"
   xapTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 8.00"
   pdf:Trapped="False"
   pdfx:GTS_PDFXVersion="PDF/X-1:2001"
   pdfx:GTS_PDFXConformance="PDF/X-1a:2001">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">liftweb-logo</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xap:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xapGImg:width="240"
      xapGImg:height="256"
      xapGImg:format="JPEG"
      xapGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADwAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq+FP+cgP/Jw+Zf8AjNF/1Dx50Wi/uoutz/WXnuZTU7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FX6W5ybt3Yq7FXYq7FXYq7FXYq7FXYq7FXwp/zkB/5OHzL/wAZov8AqHjzotF/&#xA;dRdbn+svPcymp2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kv0tzk3buxV2KuxV2KuxV2&#xA;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"/>
    </rdf:Alt>
   </xap:Thumbnails>
   <xapMM:DerivedFrom
    stRef:instanceID="uuid:199db668-58c7-423a-acf1-b48e80c0dba2"
    stRef:documentID="uuid:d651b49e-2da2-4dea-9171-c7379b9d84d8"/>
   <xapTPg:MaxPageSize
    stDim:w="11.000000"
    stDim:h="8.500000"
    stDim:unit="Inches"/>
   <xapTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xapTPg:PlateNames>
   <xapTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xapG:groupName="Default Swatch Group"
       xapG:groupType="0">
      <xapG:Colorants>
       <rdf:Seq>
        <rdf:li
         xapG:swatchName="White"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="255"
         xapG:green="255"
         xapG:blue="255"/>
        <rdf:li
         xapG:swatchName="Black"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="0"
         xapG:green="0"
         xapG:blue="0"/>
        <rdf:li
         xapG:swatchName="Moroccan Rust"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="186"
         xapG:green="0"
         xapG:blue="0"/>
        <rdf:li
         xapG:swatchName="Magenta"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="228"
         xapG:green="27"
         xapG:blue="91"/>
        <rdf:li
         xapG:swatchName="Va Va Va Voom Red"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="255"
         xapG:green="26"
         xapG:blue="0"/>
        <rdf:li
         xapG:swatchName="Orange"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="255"
         xapG:green="153"
         xapG:blue="0"/>
        <rdf:li
         xapG:swatchName="Custard"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="254"
         xapG:green="222"
         xapG:blue="88"/>
        <rdf:li
         xapG:swatchName="Canary Yellow"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="255"
         xapG:green="255"
         xapG:blue="62"/>
        <rdf:li
         xapG:swatchName="Cuban Lime"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="204"
         xapG:green="255"
         xapG:blue="66"/>
        <rdf:li
         xapG:swatchName="Dried Sage"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="163"
         xapG:green="195"
         xapG:blue="128"/>
        <rdf:li
         xapG:swatchName="Calypso Green"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="115"
         xapG:green="190"
         xapG:blue="30"/>
        <rdf:li
         xapG:swatchName="Springfield Green"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="0"
         xapG:green="255"
         xapG:blue="0"/>
        <rdf:li
         xapG:swatchName="Christmas Green"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="1"
         xapG:green="173"
         xapG:blue="78"/>
        <rdf:li
         xapG:swatchName="Crimson"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="151"
         xapG:green="15"
         xapG:blue="0"/>
        <rdf:li
         xapG:swatchName="Pine"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="0"
         xapG:green="84"
         xapG:blue="71"/>
        <rdf:li
         xapG:swatchName="Sky Blue"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="138"
         xapG:green="219"
         xapG:blue="255"/>
        <rdf:li
         xapG:swatchName="Aegean Sea"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="0"
         xapG:green="160"
         xapG:blue="198"/>
        <rdf:li
         xapG:swatchName="Denim"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="2"
         xapG:green="122"
         xapG:blue="187"/>
        <rdf:li
         xapG:swatchName="St. Petersburg Blue"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="10"
         xapG:green="80"
         xapG:blue="255"/>
        <rdf:li
         xapG:swatchName="Periwinkle"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="128"
         xapG:green="141"
         xapG:blue="255"/>
        <rdf:li
         xapG:swatchName="Maltese Lilac"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="204"
         xapG:green="204"
         xapG:blue="255"/>
        <rdf:li
         xapG:swatchName="Passionate Purple"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="186"
         xapG:green="0"
         xapG:blue="255"/>
        <rdf:li
         xapG:swatchName="Shocking Pink"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="255"
         xapG:green="102"
         xapG:blue="255"/>
        <rdf:li
         xapG:swatchName="Bubble Gum Pink"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="251"
         xapG:green="174"
         xapG:blue="255"/>
        <rdf:li
         xapG:swatchName="Bisque"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="231"
         xapG:green="185"
         xapG:blue="138"/>
        <rdf:li
         xapG:swatchName="Cafe Con Leche"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="169"
         xapG:green="119"
         xapG:blue="93"/>
        <rdf:li
         xapG:swatchName="Malt"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="138"
         xapG:green="100"
         xapG:blue="74"/>
        <rdf:li
         xapG:swatchName="Mocha"
         xapG:mode="RGB"
         xapG:type="PROCESS"
         xapG:red="90"
         xapG:green="61"
         xapG:blue="27"/>
        <rdf:li
         xapG:swatchName="Global Black"
         xapG:type="PROCESS"
         xapG:tint="100.000000"
         xapG:mode="RGB"
         xapG:red="0"
         xapG:green="0"
         xapG:blue="0"/>
        <rdf:li
         xapG:swatchName="Global Rust"
         xapG:type="PROCESS"
         xapG:tint="100.000000"
         xapG:mode="RGB"
         xapG:red="185"
         xapG:green="0"
         xapG:blue="0"/>
        <rdf:li
         xapG:swatchName="Global Orange"
         xapG:type="PROCESS"
         xapG:tint="100.000000"
         xapG:mode="RGB"
         xapG:red="255"
         xapG:green="153"
         xapG:blue="0"/>
        <rdf:li
         xapG:swatchName="Global Yellow"
         xapG:type="PROCESS"
         xapG:tint="100.000000"
         xapG:mode="RGB"
         xapG:red="255"
         xapG:green="255"
         xapG:blue="61"/>
        <rdf:li
         xapG:swatchName="Global Green"
         xapG:type="PROCESS"
         xapG:tint="100.000000"
         xapG:mode="RGB"
         xapG:red="115"
         xapG:green="190"
         xapG:blue="29"/>
        <rdf:li
         xapG:swatchName="Global Sky"
         xapG:type="PROCESS"
         xapG:tint="100.000000"
         xapG:mode="RGB"
         xapG:red="138"
         xapG:green="218"
         xapG:blue="255"/>
        <rdf:li
         xapG:swatchName="Global Sea"
         xapG:type="PROCESS"
         xapG:tint="100.000000"
         xapG:mode="RGB"
         xapG:red="0"
         xapG:green="160"
         xapG:blue="198"/>
        <rdf:li
         xapG:swatchName="Global Lilac"
         xapG:type="PROCESS"
         xapG:tint="100.000000"
         xapG:mode="RGB"
         xapG:red="204"
         xapG:green="204"
         xapG:blue="255"/>
        <rdf:li
         xapG:swatchName="Global Periwinkle"
         xapG:type="PROCESS"
         xapG:tint="100.000000"
         xapG:mode="RGB"
         xapG:red="128"
         xapG:green="140"
         xapG:blue="255"/>
        <rdf:li
         xapG:swatchName="Global Pink"
         xapG:type="PROCESS"
         xapG:tint="100.000000"
         xapG:mode="RGB"
         xapG:red="250"
         xapG:green="174"
         xapG:blue="255"/>
        <rdf:li
         xapG:swatchName="Global Cafe"
         xapG:type="PROCESS"
         xapG:tint="100.000000"
         xapG:mode="RGB"
         xapG:red="168"
         xapG:green="119"
         xapG:blue="92"/>
        <rdf:li
         xapG:swatchName="Global Mocha"
         xapG:type="PROCESS"
         xapG:tint="100.000000"
         xapG:mode="RGB"
         xapG:red="91"
         xapG:green="61"
         xapG:blue="27"/>
       </rdf:Seq>
      </xapG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xapTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -133.056 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
1.52587e-05 0 mo
1.52587e-05 133.056 li
150.335 133.056 li
150.335 0 li
cp
clp
[1 0 0 1 -235.584 0 ]ct
680.954 129.887 mo
421.163 129.887 li
421.163 -10.215 li
680.954 -10.215 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
1 0.914 0.275 0.153 cmyk
f
680.954 280.936 mo
421.163 280.936 li
421.163 140.834 li
680.954 140.834 li
cp
f
680.954 431.986 mo
421.163 431.986 li
421.163 291.883 li
680.954 291.883 li
cp
f
gsave
0 -73.728 mo
792 -73.728 li
792 538.272 li
0 538.272 li
cp
clp
305.664 81.4429 mo
305.725 81.4429 305.752 81.5039 305.793 81.6059 cv
305.984 82.2189 306.387 83.6309 306.747 84.9739 cv
307.307 83.2429 307.745 81.9399 307.893 81.4429 cv
307.947 81.4429 308.104 81.4559 308.234 81.4899 cv
308.344 81.5179 308.371 81.5789 308.316 81.7559 cv
307.914 82.9769 307.409 84.3739 306.999 85.4939 cv
306.945 85.6359 306.912 85.6979 306.85 85.7389 cv
306.795 85.7729 306.583 85.8139 306.454 85.8139 cv
306.284 85.1929 305.902 83.8019 305.493 82.4039 cv
305.282 83.1269 304.743 84.8859 304.572 85.4729 cv
304.524 85.6359 304.484 85.7049 304.402 85.7449 cv
304.319 85.7789 304.164 85.8139 304.034 85.8139 cv
303.604 84.4429 303.147 82.8809 302.643 81.5719 cv
302.758 81.5099 303.025 81.4429 303.147 81.4429 cv
303.249 81.4429 303.284 81.5099 303.399 81.8989 cv
303.638 82.6759 304.007 83.8489 304.307 84.9549 cv
304.497 84.2789 304.88 82.9839 305.268 81.7289 cv
305.261 81.6729 305.247 81.5859 305.235 81.5389 cv
305.364 81.4829 305.507 81.4429 305.657 81.4429 cv
cp
f
308.97 82.4239 mo
308.97 82.0979 308.97 81.8228 308.949 81.5648 cv
309.085 81.5229 309.291 81.4828 309.482 81.4689 cv
311.214 81.4689 li
311.193 81.6479 311.132 81.7689 311.051 81.8389 cv
310.962 81.8859 310.811 81.8859 310.512 81.8859 cv
309.57 81.8859 li
309.57 83.3309 li
311.158 83.3309 li
311.096 83.6989 310.962 83.7469 310.736 83.7469 cv
309.57 83.7469 li
309.57 85.3018 li
309.714 85.3429 310.067 85.3569 310.395 85.3569 cv
310.701 85.3569 311.145 85.3488 311.411 85.3219 cv
311.418 85.3358 li
311.369 85.5399 311.261 85.6839 311.105 85.7449 cv
311.016 85.7589 310.763 85.7729 310.279 85.7729 cv
309.72 85.7729 309.236 85.7449 309.066 85.7049 cv
308.97 85.5728 li
cp
f
312.619 85.3692 mo
312.707 85.3982 312.898 85.4182 313.061 85.4182 cv
313.627 85.4182 314.078 85.1232 314.078 84.4982 cv
314.078 83.9652 313.668 83.6942 313.007 83.6942 cv
312.877 83.6942 312.721 83.6992 312.619 83.7192 cv
cp
312.619 83.3522 mo
312.816 83.3182 313.122 83.3042 313.437 83.3182 cv
313.635 83.2432 313.846 82.9632 313.846 82.5682 cv
313.846 82.1442 313.595 81.8182 312.979 81.8182 cv
312.877 81.8182 312.701 81.8302 312.619 81.8442 cv
cp
312.025 82.4242 mo
312.025 82.0632 312.025 81.8642 312.005 81.5222 cv
312.128 81.4972 312.645 81.4292 313.068 81.4292 cv
314.289 81.4292 314.445 82.1392 314.445 82.4862 cv
314.445 82.8942 314.187 83.2282 313.866 83.4142 cv
314.445 83.5692 314.731 83.9852 314.731 84.4482 cv
314.731 85.3432 313.995 85.7992 313.035 85.7992 cv
312.714 85.7992 312.352 85.7592 312.025 85.6842 cv
cp
f
315.448 82.294 mo
315.448 82.029 315.441 81.852 315.427 81.572 cv
315.558 81.539 316.034 81.483 316.376 81.469 cv
316.56 81.463 317.725 81.469 318.08 81.469 cv
318.011 81.839 317.896 81.981 317.8 82.069 cv
317.704 82.11 317.561 82.11 317.248 82.11 cv
316.423 82.11 li
316.423 83.352 li
317.923 83.352 li
317.834 83.945 317.671 83.993 317.392 83.993 cv
316.423 83.993 li
316.423 84.64 316.429 85.213 316.443 85.718 cv
316.321 85.752 315.932 85.773 315.612 85.773 cv
315.495 85.773 315.448 85.752 315.448 85.636 cv
cp
0.796 0.616 0.02 0 cmyk
f
319.559 83.4683 mo
319.717 83.4893 320.077 83.4683 320.173 83.4193 cv
320.261 83.3733 320.528 83.2013 320.528 82.7583 cv
320.528 82.2403 320.214 81.9933 319.805 81.9933 cv
319.724 81.9933 319.627 81.9933 319.559 82.0083 cv
cp
319.559 85.5693 mo
319.559 85.7043 319.512 85.7313 319.396 85.7453 cv
319.198 85.7653 318.748 85.7722 318.591 85.7722 cv
318.604 85.4993 318.611 85.0973 318.611 84.5243 cv
318.611 82.2333 li
318.611 81.8983 318.611 81.7353 318.598 81.5513 cv
318.762 81.5103 319.518 81.4283 319.832 81.4283 cv
321.006 81.4283 321.523 81.8303 321.523 82.6693 cv
321.523 83.3043 320.991 83.6103 320.719 83.7403 cv
320.874 83.8773 321.08 84.2393 321.298 84.6263 cv
321.62 85.1983 321.803 85.4792 321.987 85.6843 cv
321.987 85.7103 li
321.933 85.7523 321.639 85.7852 321.367 85.7852 cv
321.08 85.7852 320.902 85.7313 320.719 85.4993 cv
320.562 85.3083 320.412 84.9953 320.126 84.4153 cv
319.941 84.0473 319.805 84.0193 319.654 84.0193 cv
319.614 84.0193 319.593 84.0133 319.559 84.0193 cv
cp
f
324.815 83.9995 mo
324.536 83.1885 324.353 82.7105 324.278 82.4985 cv
324.14 82.9015 323.956 83.4335 323.746 83.9995 cv
cp
323.541 84.6335 mo
323.418 84.9605 323.227 85.4655 323.146 85.6685 cv
323.118 85.7395 323.064 85.7725 322.94 85.7725 cv
322.764 85.7725 322.416 85.7315 322.252 85.6845 cv
322.247 85.6565 li
322.586 84.8245 323.616 82.3145 323.888 81.6545 cv
323.847 81.5315 li
324.148 81.4695 324.604 81.4425 324.68 81.4425 cv
324.741 81.4425 324.802 81.4765 324.842 81.5725 cv
325.157 82.3355 325.641 83.6185 325.86 84.1975 cv
326.138 84.9275 326.303 85.3495 326.445 85.6635 cv
326.439 85.6895 li
326.289 85.7395 325.736 85.7725 325.566 85.7725 cv
325.45 85.7725 325.388 85.7395 325.321 85.5475 cv
325.205 85.2065 325.115 84.9545 325.001 84.6335 cv
cp
f
330.524 81.5518 mo
330.633 81.4828 331.178 81.4427 331.362 81.4427 cv
331.437 81.4427 331.479 81.4828 331.505 81.6678 cv
331.833 84.1638 li
331.928 84.8788 332.003 85.3838 332.058 85.7108 cv
331.936 85.7448 331.424 85.7728 331.274 85.7728 cv
331.178 85.7728 331.083 85.7397 331.068 85.5887 cv
331.035 85.2548 330.993 84.8588 330.926 84.0887 cv
330.783 82.5398 li
330.619 83.0988 330.278 84.1428 329.849 85.4398 cv
329.801 85.5887 329.739 85.6438 329.569 85.6768 cv
329.426 85.7048 329.25 85.7318 329.085 85.7318 cv
328.942 85.2548 328.362 83.4337 328.089 82.5538 cv
328.022 83.3238 327.863 84.8177 327.762 85.6558 cv
327.75 85.7318 327.715 85.7728 327.633 85.7728 cv
327.414 85.7728 327.039 85.7728 326.93 85.7108 cv
327.047 84.9738 327.292 83.2288 327.552 81.6598 cv
327.537 81.5518 li
327.728 81.5098 328.001 81.4427 328.382 81.4427 cv
328.491 81.4358 328.531 81.4828 328.636 81.7768 cv
329.527 84.2988 li
329.815 83.5218 330.236 82.3358 330.524 81.6388 cv
cp
f
332.774 82.4239 mo
332.774 82.0979 332.774 81.8639 332.753 81.5648 cv
332.97 81.5179 333.319 81.4769 333.639 81.4689 cv
335.261 81.4689 li
335.214 81.8439 335.119 81.9738 335.037 82.0688 cv
334.927 82.1109 334.654 82.1109 334.348 82.1109 cv
333.749 82.1109 li
333.749 83.2148 li
335.187 83.2148 li
335.119 83.7399 334.969 83.8569 334.724 83.8569 cv
333.749 83.8569 li
333.749 85.0898 li
333.905 85.1179 334.062 85.1319 334.295 85.1319 cv
334.553 85.1319 335.085 85.1319 335.439 85.1039 cv
335.453 85.1179 li
335.386 85.4589 335.248 85.6219 335.064 85.7389 cv
334.969 85.7589 334.641 85.7729 334.089 85.7729 cv
333.477 85.7729 333.047 85.7389 332.883 85.7049 cv
332.774 85.5688 li
cp
f
338.918 81.4429 mo
339.007 81.4429 339.054 81.5579 339.094 81.6889 cv
339.189 82.0289 339.49 83.2289 339.819 84.5789 cv
340.314 82.8139 340.547 81.9339 340.691 81.4429 cv
340.738 81.4429 340.983 81.4479 341.195 81.4689 cv
341.412 81.4979 341.487 81.5649 341.427 81.7689 cv
341.072 82.9769 340.609 84.2989 340.165 85.5269 cv
340.125 85.6359 340.084 85.7049 340.008 85.7389 cv
339.912 85.7789 339.538 85.8139 339.3 85.8139 cv
339.129 85.1449 338.844 83.9109 338.589 82.9289 cv
338.522 83.2019 338.058 84.8729 337.881 85.4649 cv
337.841 85.6019 337.786 85.6979 337.683 85.7389 cv
337.58 85.7729 337.269 85.8139 337.029 85.8139 cv
336.619 84.5189 336.183 82.7779 335.706 81.6059 cv
335.842 81.5439 336.312 81.4429 336.538 81.4429 cv
336.695 81.4429 336.743 81.5319 336.851 81.9139 cv
336.988 82.4189 337.253 83.3989 337.526 84.5049 cv
337.602 84.1489 337.943 82.9629 338.229 81.8519 cv
338.222 81.7689 338.201 81.6599 338.187 81.5989 cv
338.46 81.4979 338.679 81.4429 338.911 81.4429 cv
cp
f
343.896 81.9673 mo
343.309 81.9673 342.79 82.4443 342.79 83.5353 cv
342.79 84.6473 343.342 85.2333 344.025 85.2333 cv
344.741 85.2333 345.143 84.6343 345.143 83.6393 cv
345.143 82.7103 344.712 81.9673 343.902 81.9673 cv
cp
343.984 81.3673 mo
345.402 81.3673 346.173 82.3693 346.173 83.5633 cv
346.173 84.7973 345.395 85.8333 343.949 85.8333 cv
342.375 85.8333 341.749 84.7013 341.749 83.6313 cv
341.749 82.3423 342.573 81.3673 343.977 81.3673 cv
cp
f
347.837 83.4683 mo
347.993 83.4893 348.355 83.4683 348.45 83.4193 cv
348.539 83.3733 348.805 83.2013 348.805 82.7583 cv
348.805 82.2403 348.491 81.9933 348.082 81.9933 cv
348.001 81.9933 347.904 81.9933 347.837 82.0083 cv
cp
347.837 85.5693 mo
347.837 85.7043 347.789 85.7313 347.673 85.7453 cv
347.475 85.7653 347.025 85.7722 346.868 85.7722 cv
346.882 85.4993 346.888 85.0973 346.888 84.5243 cv
346.888 82.2333 li
346.888 81.8983 346.888 81.7353 346.875 81.5513 cv
347.038 81.5103 347.795 81.4283 348.109 81.4283 cv
349.283 81.4283 349.8 81.8303 349.8 82.6693 cv
349.8 83.3043 349.268 83.6103 348.996 83.7403 cv
349.152 83.8773 349.357 84.2393 349.575 84.6263 cv
349.896 85.1983 350.079 85.4792 350.265 85.6843 cv
350.265 85.7103 li
350.21 85.7523 349.916 85.7852 349.643 85.7852 cv
349.357 85.7852 349.179 85.7313 348.996 85.4993 cv
348.838 85.3083 348.689 84.9953 348.402 84.4153 cv
348.217 84.0473 348.082 84.0193 347.932 84.0193 cv
347.892 84.0193 347.871 84.0133 347.837 84.0193 cv
cp
f
350.727 82.3638 mo
350.727 81.9058 350.721 81.6268 350.707 81.4978 cv
350.842 81.4768 351.389 81.4428 351.545 81.4428 cv
351.683 81.4428 351.703 81.5178 351.703 81.8178 cv
351.703 83.5428 li
352.193 82.9488 352.951 82.0018 353.359 81.4148 cv
353.497 81.4148 353.687 81.4228 353.897 81.4688 cv
354.17 81.5178 354.163 81.6268 354.027 81.8228 cv
353.769 82.1728 353.12 82.9358 352.678 83.4738 cv
352.978 83.9718 353.891 85.1988 354.293 85.6558 cv
354.293 85.6838 li
354.231 85.7238 353.877 85.7858 353.522 85.7858 cv
353.278 85.7858 353.153 85.7238 352.923 85.4308 cv
352.609 85.0358 351.79 83.8638 351.703 83.6648 cv
351.703 84.8788 li
351.703 85.3568 351.716 85.5808 351.723 85.7178 cv
351.6 85.7518 351.067 85.7728 350.891 85.7728 cv
350.782 85.7728 350.727 85.7518 350.727 85.6358 cv
cp
f
305.741 53.8599 mo
306.165 50.7499 306.4 48.8179 306.448 47.7339 cv
307.249 47.5919 308.521 47.4039 309.699 47.4039 cv
310.171 47.4039 310.312 47.7809 309.982 50.1369 cv
306.824 74.3139 li
307.72 74.5489 310.123 74.6429 312.48 74.6429 cv
314.978 74.6429 317.475 74.5959 318.701 74.4069 cv
318.748 74.5019 li
318.559 75.5389 317.664 76.6699 316.721 77.0469 cv
315.967 77.2349 314.648 77.2819 311.443 77.2819 cv
307.155 77.2819 304.515 77.0469 303.338 76.8109 cv
303.101 76.5749 302.913 76.2458 302.724 75.9629 cv
cp
1 0.914 0.275 0.153 cmyk
f
327.843 56.0078 mo
328.267 56.0078 328.362 56.2908 328.174 57.7518 cv
327.042 65.9988 326.429 70.6238 325.958 73.9698 cv
325.816 74.8658 325.675 75.1488 325.298 75.3838 cv
324.874 75.6198 323.272 75.9968 321.951 76.0448 cv
322.376 73.2158 322.989 69.7218 323.554 65.4328 cv
324.215 60.3908 324.545 57.7518 324.545 56.7618 cv
325.157 56.5268 327.325 56.0078 327.796 56.0078 cv
cp
f
327.561 47.3028 mo
328.503 47.3028 329.398 47.7738 329.446 49.3288 cv
329.493 51.0728 328.126 51.8268 327.184 51.8268 cv
326.241 51.8268 325.346 51.3078 325.298 49.8468 cv
325.251 47.8208 326.807 47.3028 327.513 47.3028 cv
cp
f
331.331 59.4214 mo
331.425 58.4784 331.99 56.9704 332.791 56.8764 cv
333.31 56.8764 334.159 56.9234 335.007 56.8764 cv
336.467 46.2254 340.285 44.7174 343.538 44.7174 cv
344.951 44.7174 346.129 45.2354 346.553 45.6604 cv
346.601 46.4614 346.129 47.7334 345.281 47.6864 cv
344.904 47.5454 344.197 47.3574 343.631 47.3574 cv
340.897 47.3574 339.578 49.9954 338.636 56.8764 cv
341.086 56.8764 342.925 56.9234 343.914 56.7344 cv
343.631 57.8184 343.254 58.6204 342.547 59.0444 cv
342.029 59.3744 340.85 59.4214 338.306 59.4214 cv
337.457 66.2074 337.489 64.0274 336.783 68.6454 cv
335.415 77.8824 332.164 80.3794 328.205 80.3794 cv
326.933 80.3794 325.331 79.9094 324.859 79.3904 cv
324.058 78.6364 324.482 77.1754 325.047 76.7984 cv
325.849 77.2224 326.933 77.6004 327.875 77.6004 cv
331.126 77.6004 332.352 74.8664 333.436 67.2314 cv
334.237 61.8594 334.206 63.6624 334.724 59.4214 cv
cp
f
354.658 71.7686 mo
355.082 72.7106 354.799 74.2186 353.951 75.1146 cv
352.631 76.5286 350.793 77.5646 348.485 77.5646 cv
345.939 77.5646 344.431 75.8686 345.185 70.5436 cv
345.657 67.2446 346.27 63.8516 346.976 59.4216 cv
343.818 59.4216 li
343.818 58.5256 344.431 56.8756 345.327 56.8756 cv
347.4 56.8756 li
348.013 53.7186 348.579 52.0216 349.096 51.5976 cv
349.757 51.0796 351.123 50.6546 352.066 50.6546 cv
351.736 52.5876 351.359 54.5196 350.982 56.8756 cv
354.14 56.8756 355.695 56.8756 356.921 56.6876 cv
356.684 57.7716 356.213 58.6206 355.554 59.0436 cv
354.988 59.3736 353.668 59.4216 350.511 59.4216 cv
349.804 63.6626 349.003 69.2236 348.767 70.9196 cv
348.437 73.5126 348.862 74.5496 350.04 74.5496 cv
351.406 74.5496 353.055 73.5126 354.564 71.7686 cv
cp
f
290.973 66.5855 mo
290.973 69.0455 288.978 71.8815 286.519 72.9195 cv
270.189 79.8145 li
267.73 80.8535 265.736 79.7015 265.736 77.2415 cv
265.736 60.9105 li
265.736 58.4515 267.73 55.6165 270.189 54.5775 cv
286.519 47.6825 li
288.978 46.6445 290.973 47.7965 290.973 50.2565 cv
cp
0.796 0.616 0.02 0 cmyk
f
294.462 52.7276 mo
294.462 69.0026 li
294.462 71.4616 292.468 74.2976 290.008 75.3356 cv
273.678 82.2306 li
272.834 82.5876 272.046 82.6816 271.373 82.5566 cv
271.373 82.6116 li
271.373 85.0696 273.367 86.2226 275.826 85.1846 cv
292.157 78.2896 li
294.616 77.2506 296.61 74.4156 296.61 71.9556 cv
296.61 55.6256 li
296.61 54.0106 295.748 52.9656 294.462 52.7276 cv
1 0.914 0.275 0.153 cmyk
f
288.256 78.9092 mo
286.153 78.9092 284.37 78.1612 282.905 76.6612 cv
281.441 75.1622 280.709 73.3602 280.709 71.2552 cv
280.709 60.1622 li
284.676 58.4872 li
277.561 52.4552 li
271.088 64.2232 li
275.328 62.4332 li
275.328 71.2502 li
275.328 74.7792 276.599 77.7832 279.139 80.2592 cv
280.083 81.1782 281.095 81.9262 282.175 82.5042 cv
290.689 78.9092 li
cp
0 0 0 0 cmyk
f
546.664 81.4429 mo
546.725 81.4429 546.752 81.5039 546.793 81.6059 cv
546.983 82.2189 547.387 83.6309 547.747 84.9739 cv
548.307 83.2429 548.744 81.9399 548.893 81.4429 cv
548.947 81.4429 549.103 81.4559 549.233 81.4899 cv
549.344 81.5179 549.37 81.5789 549.315 81.7559 cv
548.913 82.9769 548.408 84.3739 547.999 85.4939 cv
547.945 85.6359 547.911 85.6979 547.85 85.7389 cv
547.795 85.7729 547.583 85.8139 547.453 85.8139 cv
547.283 85.1929 546.901 83.8019 546.492 82.4039 cv
546.281 83.1269 545.742 84.8859 545.571 85.4729 cv
545.523 85.6359 545.484 85.7049 545.401 85.7449 cv
545.318 85.7789 545.163 85.8139 545.033 85.8139 cv
544.603 84.4429 544.146 82.8809 543.643 81.5719 cv
543.758 81.5099 544.025 81.4429 544.146 81.4429 cv
544.249 81.4429 544.283 81.5099 544.398 81.8989 cv
544.637 82.6759 545.006 83.8489 545.307 84.9549 cv
545.496 84.2789 545.879 82.9839 546.268 81.7289 cv
546.261 81.6729 546.246 81.5859 546.234 81.5389 cv
546.363 81.4829 546.507 81.4429 546.656 81.4429 cv
cp
f
549.971 82.4239 mo
549.971 82.0979 549.971 81.8228 549.95 81.5648 cv
550.086 81.5229 550.291 81.4828 550.483 81.4689 cv
552.214 81.4689 li
552.194 81.6479 552.133 81.7689 552.051 81.8389 cv
551.962 81.8859 551.812 81.8859 551.512 81.8859 cv
550.571 81.8859 li
550.571 83.3309 li
552.159 83.3309 li
552.097 83.6989 551.962 83.7469 551.737 83.7469 cv
550.571 83.7469 li
550.571 85.3018 li
550.715 85.3429 551.068 85.3569 551.395 85.3569 cv
551.701 85.3569 552.146 85.3488 552.411 85.3219 cv
552.418 85.3358 li
552.369 85.5399 552.262 85.6839 552.106 85.7449 cv
552.016 85.7589 551.764 85.7729 551.28 85.7729 cv
550.721 85.7729 550.237 85.7449 550.067 85.7049 cv
549.971 85.5728 li
cp
f
553.619 85.3692 mo
553.707 85.3982 553.897 85.4182 554.06 85.4182 cv
554.627 85.4182 555.078 85.1232 555.078 84.4982 cv
555.078 83.9652 554.668 83.6942 554.006 83.6942 cv
553.877 83.6942 553.721 83.6992 553.619 83.7192 cv
cp
553.619 83.3522 mo
553.815 83.3182 554.122 83.3042 554.436 83.3182 cv
554.635 83.2432 554.846 82.9632 554.846 82.5682 cv
554.846 82.1442 554.594 81.8182 553.978 81.8182 cv
553.877 81.8182 553.701 81.8302 553.619 81.8442 cv
cp
553.024 82.4242 mo
553.024 82.0632 553.024 81.8642 553.004 81.5222 cv
553.127 81.4972 553.644 81.4292 554.067 81.4292 cv
555.289 81.4292 555.445 82.1392 555.445 82.4862 cv
555.445 82.8942 555.186 83.2282 554.865 83.4142 cv
555.445 83.5692 555.73 83.9852 555.73 84.4482 cv
555.73 85.3432 554.995 85.7992 554.034 85.7992 cv
553.714 85.7992 553.351 85.7592 553.024 85.6842 cv
cp
f
556.447 82.294 mo
556.447 82.029 556.441 81.852 556.427 81.572 cv
556.557 81.539 557.034 81.483 557.375 81.469 cv
557.559 81.463 558.724 81.469 559.08 81.469 cv
559.011 81.839 558.896 81.981 558.799 82.069 cv
558.704 82.11 558.56 82.11 558.248 82.11 cv
557.422 82.11 li
557.422 83.352 li
558.923 83.352 li
558.834 83.945 558.67 83.993 558.391 83.993 cv
557.422 83.993 li
557.422 84.64 557.429 85.213 557.442 85.718 cv
557.32 85.752 556.931 85.773 556.611 85.773 cv
556.495 85.773 556.447 85.752 556.447 85.636 cv
cp
0.592 0.408 0.035 0 cmyk
f
560.559 83.4683 mo
560.717 83.4893 561.078 83.4683 561.173 83.4193 cv
561.262 83.3733 561.528 83.2013 561.528 82.7583 cv
561.528 82.2403 561.214 81.9933 560.805 81.9933 cv
560.724 81.9933 560.627 81.9933 560.559 82.0083 cv
cp
560.559 85.5693 mo
560.559 85.7043 560.512 85.7313 560.397 85.7453 cv
560.199 85.7653 559.748 85.7722 559.591 85.7722 cv
559.604 85.4993 559.612 85.0973 559.612 84.5243 cv
559.612 82.2333 li
559.612 81.8983 559.612 81.7353 559.598 81.5513 cv
559.762 81.5103 560.518 81.4283 560.832 81.4283 cv
562.006 81.4283 562.524 81.8303 562.524 82.6693 cv
562.524 83.3043 561.992 83.6103 561.719 83.7403 cv
561.875 83.8773 562.08 84.2393 562.298 84.6263 cv
562.62 85.1983 562.803 85.4792 562.987 85.6843 cv
562.987 85.7103 li
562.933 85.7523 562.639 85.7852 562.368 85.7852 cv
562.08 85.7852 561.903 85.7313 561.719 85.4993 cv
561.563 85.3083 561.413 84.9953 561.126 84.4153 cv
560.942 84.0473 560.805 84.0193 560.655 84.0193 cv
560.614 84.0193 560.594 84.0133 560.559 84.0193 cv
cp
f
565.815 83.9995 mo
565.536 83.1885 565.353 82.7105 565.278 82.4985 cv
565.14 82.9015 564.957 83.4335 564.746 83.9995 cv
cp
564.541 84.6335 mo
564.418 84.9605 564.227 85.4655 564.146 85.6685 cv
564.119 85.7395 564.064 85.7725 563.94 85.7725 cv
563.764 85.7725 563.416 85.7315 563.252 85.6845 cv
563.247 85.6565 li
563.586 84.8245 564.616 82.3145 564.888 81.6545 cv
564.847 81.5315 li
565.148 81.4695 565.604 81.4425 565.679 81.4425 cv
565.741 81.4425 565.802 81.4765 565.842 81.5725 cv
566.158 82.3355 566.641 83.6185 566.86 84.1975 cv
567.138 84.9275 567.303 85.3495 567.445 85.6635 cv
567.439 85.6895 li
567.289 85.7395 566.736 85.7725 566.566 85.7725 cv
566.45 85.7725 566.388 85.7395 566.321 85.5475 cv
566.205 85.2065 566.115 84.9545 566.002 84.6335 cv
cp
f
571.523 81.5518 mo
571.632 81.4828 572.177 81.4427 572.362 81.4427 cv
572.437 81.4427 572.478 81.4828 572.504 81.6678 cv
572.833 84.1638 li
572.927 84.8788 573.003 85.3838 573.058 85.7108 cv
572.935 85.7448 572.423 85.7728 572.273 85.7728 cv
572.177 85.7728 572.083 85.7397 572.068 85.5887 cv
572.035 85.2548 571.993 84.8588 571.925 84.0887 cv
571.783 82.5398 li
571.619 83.0988 571.277 84.1428 570.849 85.4398 cv
570.8 85.5887 570.739 85.6438 570.568 85.6768 cv
570.425 85.7048 570.25 85.7318 570.085 85.7318 cv
569.942 85.2548 569.362 83.4337 569.089 82.5538 cv
569.021 83.3238 568.863 84.8177 568.761 85.6558 cv
568.75 85.7318 568.714 85.7728 568.632 85.7728 cv
568.414 85.7728 568.039 85.7728 567.929 85.7108 cv
568.046 84.9738 568.291 83.2288 568.551 81.6598 cv
568.537 81.5518 li
568.727 81.5098 569 81.4427 569.381 81.4427 cv
569.491 81.4358 569.531 81.4828 569.635 81.7768 cv
570.527 84.2988 li
570.814 83.5218 571.236 82.3358 571.523 81.6388 cv
cp
f
573.774 82.4239 mo
573.774 82.0979 573.774 81.8639 573.753 81.5648 cv
573.97 81.5179 574.319 81.4769 574.639 81.4689 cv
576.261 81.4689 li
576.214 81.8439 576.119 81.9738 576.037 82.0688 cv
575.927 82.1109 575.654 82.1109 575.347 82.1109 cv
574.749 82.1109 li
574.749 83.2148 li
576.187 83.2148 li
576.119 83.7399 575.968 83.8569 575.724 83.8569 cv
574.749 83.8569 li
574.749 85.0898 li
574.905 85.1179 575.062 85.1319 575.295 85.1319 cv
575.553 85.1319 576.086 85.1319 576.439 85.1039 cv
576.453 85.1179 li
576.386 85.4589 576.248 85.6219 576.064 85.7389 cv
575.968 85.7589 575.641 85.7729 575.089 85.7729 cv
574.476 85.7729 574.046 85.7389 573.882 85.7049 cv
573.774 85.5688 li
cp
f
579.918 81.4429 mo
580.007 81.4429 580.055 81.5579 580.094 81.6889 cv
580.189 82.0289 580.49 83.2289 580.818 84.5789 cv
581.314 82.8139 581.547 81.9339 581.691 81.4429 cv
581.738 81.4429 581.983 81.4479 582.195 81.4689 cv
582.412 81.4979 582.487 81.5649 582.427 81.7689 cv
582.072 82.9769 581.609 84.2989 581.164 85.5269 cv
581.125 85.6359 581.084 85.7049 581.008 85.7389 cv
580.912 85.7789 580.537 85.8139 580.301 85.8139 cv
580.129 85.1449 579.844 83.9109 579.59 82.9289 cv
579.522 83.2019 579.059 84.8729 578.881 85.4649 cv
578.841 85.6019 578.785 85.6979 578.684 85.7389 cv
578.58 85.7729 578.269 85.8139 578.029 85.8139 cv
577.619 84.5189 577.183 82.7779 576.706 81.6059 cv
576.842 81.5439 577.313 81.4429 577.537 81.4429 cv
577.695 81.4429 577.742 81.5319 577.852 81.9139 cv
577.988 82.4189 578.254 83.3989 578.526 84.5049 cv
578.602 84.1489 578.943 82.9629 579.229 81.8519 cv
579.223 81.7689 579.201 81.6599 579.188 81.5989 cv
579.46 81.4979 579.679 81.4429 579.91 81.4429 cv
cp
f
584.896 81.9673 mo
584.309 81.9673 583.791 82.4443 583.791 83.5353 cv
583.791 84.6473 584.341 85.2333 585.025 85.2333 cv
585.74 85.2333 586.143 84.6343 586.143 83.6393 cv
586.143 82.7103 585.713 81.9673 584.901 81.9673 cv
cp
584.984 81.3673 mo
586.401 81.3673 587.172 82.3693 587.172 83.5633 cv
587.172 84.7973 586.395 85.8333 584.95 85.8333 cv
583.375 85.8333 582.749 84.7013 582.749 83.6313 cv
582.749 82.3423 583.573 81.3673 584.977 81.3673 cv
cp
f
588.837 83.4683 mo
588.993 83.4893 589.355 83.4683 589.449 83.4193 cv
589.539 83.3733 589.805 83.2013 589.805 82.7583 cv
589.805 82.2403 589.49 81.9933 589.082 81.9933 cv
589 81.9933 588.904 81.9933 588.837 82.0083 cv
cp
588.837 85.5693 mo
588.837 85.7043 588.789 85.7313 588.673 85.7453 cv
588.475 85.7653 588.025 85.7722 587.867 85.7722 cv
587.882 85.4993 587.889 85.0973 587.889 84.5243 cv
587.889 82.2333 li
587.889 81.8983 587.889 81.7353 587.875 81.5513 cv
588.037 81.5103 588.795 81.4283 589.109 81.4283 cv
590.283 81.4283 590.801 81.8303 590.801 82.6693 cv
590.801 83.3043 590.268 83.6103 589.996 83.7403 cv
590.152 83.8773 590.357 84.2393 590.574 84.6263 cv
590.896 85.1983 591.079 85.4792 591.265 85.6843 cv
591.265 85.7103 li
591.209 85.7523 590.916 85.7852 590.643 85.7852 cv
590.357 85.7852 590.18 85.7313 589.996 85.4993 cv
589.838 85.3083 589.69 84.9953 589.402 84.4153 cv
589.217 84.0473 589.082 84.0193 588.932 84.0193 cv
588.892 84.0193 588.871 84.0133 588.837 84.0193 cv
cp
f
591.727 82.3638 mo
591.727 81.9058 591.721 81.6268 591.707 81.4978 cv
591.842 81.4768 592.389 81.4428 592.545 81.4428 cv
592.683 81.4428 592.704 81.5178 592.704 81.8178 cv
592.704 83.5428 li
593.194 82.9488 593.952 82.0018 594.36 81.4148 cv
594.497 81.4148 594.688 81.4228 594.898 81.4688 cv
595.17 81.5178 595.164 81.6268 595.028 81.8228 cv
594.769 82.1728 594.121 82.9358 593.678 83.4738 cv
593.979 83.9718 594.891 85.1988 595.293 85.6558 cv
595.293 85.6838 li
595.232 85.7238 594.877 85.7858 594.523 85.7858 cv
594.279 85.7858 594.154 85.7238 593.923 85.4308 cv
593.61 85.0358 592.791 83.8638 592.704 83.6648 cv
592.704 84.8788 li
592.704 85.3568 592.717 85.5808 592.723 85.7178 cv
592.6 85.7518 592.068 85.7728 591.891 85.7728 cv
591.782 85.7728 591.727 85.7518 591.727 85.6358 cv
cp
f
546.741 53.8599 mo
547.165 50.7499 547.4 48.8179 547.448 47.7339 cv
548.249 47.5919 549.521 47.4039 550.699 47.4039 cv
551.171 47.4039 551.312 47.7809 550.982 50.1369 cv
547.824 74.3139 li
548.72 74.5489 551.123 74.6429 553.48 74.6429 cv
555.978 74.6429 558.475 74.5959 559.701 74.4069 cv
559.748 74.5019 li
559.559 75.5389 558.664 76.6699 557.721 77.0469 cv
556.967 77.2349 555.648 77.2819 552.443 77.2819 cv
548.154 77.2819 545.515 77.0469 544.338 76.8109 cv
544.101 76.5749 543.913 76.2458 543.724 75.9629 cv
cp
0 0 0 0 cmyk
f
568.844 56.0078 mo
569.268 56.0078 569.363 56.2908 569.174 57.7518 cv
568.043 65.9988 567.43 70.6238 566.958 73.9698 cv
566.817 74.8658 566.675 75.1488 566.298 75.3838 cv
565.874 75.6198 564.272 75.9968 562.951 76.0448 cv
563.376 73.2158 563.99 69.7218 564.555 65.4328 cv
565.215 60.3908 565.545 57.7518 565.545 56.7618 cv
566.158 56.5268 568.325 56.0078 568.797 56.0078 cv
cp
f
568.56 47.3028 mo
569.503 47.3028 570.398 47.7738 570.445 49.3288 cv
570.493 51.0728 569.126 51.8268 568.183 51.8268 cv
567.242 51.8268 566.345 51.3078 566.298 49.8468 cv
566.251 47.8208 567.806 47.3028 568.513 47.3028 cv
cp
f
572.33 59.4214 mo
572.424 58.4784 572.99 56.9704 573.791 56.8764 cv
574.309 56.8764 575.158 56.9234 576.006 56.8764 cv
577.467 46.2254 581.285 44.7174 584.537 44.7174 cv
585.95 44.7174 587.129 45.2354 587.553 45.6604 cv
587.6 46.4614 587.129 47.7334 586.28 47.6864 cv
585.903 47.5454 585.196 47.3574 584.631 47.3574 cv
581.896 47.3574 580.578 49.9954 579.635 56.8764 cv
582.086 56.8764 583.924 56.9234 584.914 56.7344 cv
584.631 57.8184 584.254 58.6204 583.547 59.0444 cv
583.028 59.3744 581.85 59.4214 579.305 59.4214 cv
578.457 66.2074 578.488 64.0274 577.782 68.6454 cv
576.415 77.8824 573.163 80.3794 569.205 80.3794 cv
567.932 80.3794 566.33 79.9094 565.858 79.3904 cv
565.058 78.6364 565.481 77.1754 566.047 76.7984 cv
566.848 77.2224 567.932 77.6004 568.875 77.6004 cv
572.126 77.6004 573.351 74.8664 574.435 67.2314 cv
575.236 61.8594 575.205 63.6624 575.724 59.4214 cv
cp
f
595.658 71.7686 mo
596.082 72.7106 595.799 74.2186 594.951 75.1146 cv
593.631 76.5286 591.793 77.5646 589.484 77.5646 cv
586.939 77.5646 585.431 75.8686 586.185 70.5436 cv
586.657 67.2446 587.269 63.8516 587.976 59.4216 cv
584.818 59.4216 li
584.818 58.5256 585.431 56.8756 586.327 56.8756 cv
588.4 56.8756 li
589.013 53.7186 589.579 52.0216 590.096 51.5976 cv
590.758 51.0796 592.123 50.6546 593.066 50.6546 cv
592.736 52.5876 592.359 54.5196 591.982 56.8756 cv
595.14 56.8756 596.695 56.8756 597.921 56.6876 cv
597.684 57.7716 597.213 58.6206 596.554 59.0436 cv
595.988 59.3736 594.668 59.4216 591.512 59.4216 cv
590.804 63.6626 590.003 69.2236 589.767 70.9196 cv
589.437 73.5126 589.861 74.5496 591.04 74.5496 cv
592.406 74.5496 594.055 73.5126 595.564 71.7686 cv
cp
f
531.973 66.5855 mo
531.973 69.0455 529.979 71.8815 527.52 72.9195 cv
511.19 79.8145 li
508.73 80.8535 506.736 79.7015 506.736 77.2415 cv
506.736 60.9105 li
506.736 58.4515 508.73 55.6165 511.19 54.5775 cv
527.52 47.6825 li
529.979 46.6445 531.973 47.7965 531.973 50.2565 cv
cp
f
535.463 52.7276 mo
535.463 69.0026 li
535.463 71.4616 533.469 74.2976 531.008 75.3356 cv
514.679 82.2306 li
513.834 82.5876 513.047 82.6816 512.373 82.5566 cv
512.373 82.6116 li
512.373 85.0696 514.367 86.2226 516.826 85.1846 cv
533.157 78.2896 li
535.617 77.2506 537.611 74.4156 537.611 71.9556 cv
537.611 55.6256 li
537.611 54.0106 536.748 52.9656 535.463 52.7276 cv
0.592 0.408 0.035 0 cmyk
f
529.256 78.9092 mo
527.153 78.9092 525.37 78.1612 523.905 76.6612 cv
522.442 75.1622 521.709 73.3602 521.709 71.2552 cv
521.709 60.1622 li
525.676 58.4872 li
518.561 52.4552 li
512.088 64.2232 li
516.328 62.4332 li
516.328 71.2502 li
516.328 74.7792 517.6 77.7832 520.139 80.2592 cv
521.083 81.1782 522.096 81.9262 523.175 82.5042 cv
531.689 78.9092 li
cp
1 0.914 0.275 0.153 cmyk
f
305.663 225.135 mo
305.724 225.135 305.751 225.197 305.793 225.297 cv
305.983 225.911 306.386 227.322 306.747 228.665 cv
307.306 226.934 307.744 225.632 307.893 225.135 cv
307.946 225.135 308.103 225.149 308.233 225.183 cv
308.343 225.21 308.37 225.27 308.315 225.448 cv
307.913 226.668 307.409 228.067 306.998 229.186 cv
306.945 229.327 306.911 229.389 306.85 229.432 cv
306.794 229.463 306.583 229.505 306.454 229.505 cv
306.283 228.886 305.901 227.493 305.492 226.096 cv
305.282 226.82 304.743 228.577 304.571 229.165 cv
304.523 229.327 304.483 229.396 304.401 229.437 cv
304.319 229.471 304.163 229.505 304.033 229.505 cv
303.604 228.135 303.147 226.573 302.642 225.265 cv
302.758 225.201 303.025 225.135 303.147 225.135 cv
303.249 225.135 303.283 225.201 303.399 225.589 cv
303.637 226.368 304.006 227.541 304.307 228.647 cv
304.496 227.971 304.879 226.676 305.267 225.42 cv
305.261 225.365 305.246 225.277 305.234 225.231 cv
305.364 225.176 305.506 225.135 305.657 225.135 cv
cp
f
308.97 226.117 mo
308.97 225.791 308.97 225.515 308.949 225.257 cv
309.085 225.216 309.291 225.177 309.482 225.161 cv
311.213 225.161 li
311.192 225.339 311.132 225.462 311.05 225.532 cv
310.962 225.578 310.811 225.578 310.512 225.578 cv
309.57 225.578 li
309.57 227.024 li
311.158 227.024 li
311.096 227.391 310.962 227.439 310.735 227.439 cv
309.57 227.439 li
309.57 228.995 li
309.714 229.036 310.067 229.049 310.395 229.049 cv
310.701 229.049 311.145 229.042 311.411 229.015 cv
311.418 229.028 li
311.369 229.231 311.261 229.376 311.104 229.437 cv
311.015 229.451 310.763 229.464 310.279 229.464 cv
309.72 229.464 309.236 229.437 309.066 229.396 cv
308.97 229.266 li
cp
f
312.619 229.06 mo
312.707 229.089 312.898 229.11 313.061 229.11 cv
313.627 229.11 314.078 228.816 314.078 228.19 cv
314.078 227.657 313.668 227.386 313.007 227.386 cv
312.877 227.386 312.721 227.391 312.619 227.412 cv
cp
312.619 227.044 mo
312.816 227.011 313.122 226.996 313.437 227.011 cv
313.635 226.934 313.846 226.656 313.846 226.261 cv
313.846 225.836 313.594 225.509 312.979 225.509 cv
312.877 225.509 312.701 225.523 312.619 225.536 cv
cp
312.025 226.117 mo
312.025 225.755 312.025 225.558 312.004 225.215 cv
312.128 225.19 312.645 225.121 313.068 225.121 cv
314.289 225.121 314.445 225.831 314.445 226.178 cv
314.445 226.585 314.187 226.92 313.866 227.106 cv
314.445 227.26 314.731 227.677 314.731 228.14 cv
314.731 229.036 313.995 229.492 313.035 229.492 cv
312.713 229.492 312.352 229.451 312.025 229.375 cv
cp
f
315.447 225.987 mo
315.447 225.721 315.441 225.544 315.426 225.265 cv
315.557 225.231 316.034 225.176 316.375 225.161 cv
316.559 225.156 317.724 225.161 318.079 225.161 cv
318.01 225.532 317.896 225.674 317.799 225.761 cv
317.703 225.802 317.561 225.802 317.248 225.802 cv
316.422 225.802 li
316.422 227.045 li
317.923 227.045 li
317.834 227.636 317.67 227.685 317.391 227.685 cv
316.422 227.685 li
316.422 228.333 316.429 228.905 316.442 229.41 cv
316.32 229.444 315.932 229.464 315.611 229.464 cv
315.494 229.464 315.447 229.444 315.447 229.328 cv
cp
0.796 0.616 0.02 0 cmyk
f
319.559 227.16 mo
319.717 227.181 320.077 227.16 320.172 227.111 cv
320.261 227.065 320.527 226.894 320.527 226.451 cv
320.527 225.932 320.214 225.686 319.805 225.686 cv
319.724 225.686 319.627 225.686 319.559 225.7 cv
cp
319.559 229.261 mo
319.559 229.396 319.512 229.424 319.396 229.437 cv
319.198 229.458 318.748 229.464 318.591 229.464 cv
318.604 229.19 318.611 228.791 318.611 228.216 cv
318.611 225.925 li
318.611 225.59 318.611 225.428 318.598 225.245 cv
318.762 225.202 319.518 225.121 319.832 225.121 cv
321.006 225.121 321.523 225.523 321.523 226.362 cv
321.523 226.996 320.991 227.302 320.718 227.432 cv
320.874 227.569 321.08 227.931 321.298 228.318 cv
321.619 228.891 321.803 229.172 321.987 229.376 cv
321.987 229.403 li
321.933 229.444 321.639 229.478 321.367 229.478 cv
321.08 229.478 320.902 229.424 320.718 229.19 cv
320.562 229.001 320.412 228.686 320.126 228.107 cv
319.941 227.741 319.805 227.711 319.653 227.711 cv
319.613 227.711 319.593 227.706 319.559 227.711 cv
cp
f
324.815 227.69 mo
324.536 226.881 324.353 226.403 324.278 226.19 cv
324.14 226.594 323.956 227.127 323.746 227.69 cv
cp
323.541 228.325 mo
323.418 228.652 323.227 229.157 323.146 229.362 cv
323.118 229.432 323.064 229.463 322.94 229.463 cv
322.764 229.463 322.415 229.423 322.252 229.376 cv
322.246 229.348 li
322.586 228.516 323.615 226.007 323.888 225.347 cv
323.847 225.224 li
324.148 225.161 324.604 225.135 324.68 225.135 cv
324.74 225.135 324.802 225.169 324.842 225.265 cv
325.157 226.028 325.641 227.311 325.86 227.891 cv
326.138 228.619 326.303 229.042 326.444 229.357 cv
326.439 229.382 li
326.289 229.432 325.736 229.463 325.566 229.463 cv
325.45 229.463 325.388 229.432 325.321 229.24 cv
325.204 228.898 325.115 228.647 325.001 228.325 cv
cp
f
330.524 225.245 mo
330.633 225.177 331.178 225.136 331.362 225.136 cv
331.437 225.136 331.479 225.177 331.505 225.359 cv
331.833 227.856 li
331.928 228.572 332.003 229.077 332.058 229.403 cv
331.936 229.437 331.424 229.464 331.274 229.464 cv
331.178 229.464 331.083 229.433 331.068 229.281 cv
331.035 228.946 330.993 228.552 330.925 227.782 cv
330.783 226.231 li
330.619 226.792 330.278 227.834 329.849 229.131 cv
329.801 229.281 329.739 229.336 329.569 229.369 cv
329.426 229.396 329.249 229.424 329.085 229.424 cv
328.942 228.946 328.362 227.127 328.089 226.247 cv
328.022 227.016 327.863 228.51 327.762 229.349 cv
327.75 229.424 327.714 229.464 327.633 229.464 cv
327.414 229.464 327.039 229.464 326.93 229.403 cv
327.047 228.666 327.292 226.921 327.552 225.352 cv
327.537 225.245 li
327.728 225.202 328.001 225.136 328.382 225.136 cv
328.491 225.129 328.531 225.177 328.636 225.469 cv
329.527 227.992 li
329.814 227.216 330.236 226.028 330.524 225.332 cv
cp
f
332.774 226.117 mo
332.774 225.791 332.774 225.558 332.754 225.257 cv
332.971 225.211 333.319 225.17 333.64 225.161 cv
335.262 225.161 li
335.215 225.536 335.119 225.666 335.037 225.762 cv
334.928 225.803 334.655 225.803 334.348 225.803 cv
333.749 225.803 li
333.749 226.907 li
335.187 226.907 li
335.119 227.432 334.969 227.549 334.724 227.549 cv
333.749 227.549 li
333.749 228.782 li
333.905 228.809 334.062 228.823 334.295 228.823 cv
334.554 228.823 335.086 228.823 335.44 228.798 cv
335.454 228.809 li
335.386 229.151 335.248 229.314 335.064 229.432 cv
334.969 229.451 334.642 229.464 334.089 229.464 cv
333.477 229.464 333.047 229.432 332.883 229.396 cv
332.774 229.261 li
cp
f
338.918 225.135 mo
339.006 225.135 339.054 225.249 339.094 225.381 cv
339.189 225.721 339.49 226.92 339.819 228.271 cv
340.314 226.505 340.547 225.626 340.69 225.135 cv
340.737 225.135 340.983 225.14 341.195 225.16 cv
341.412 225.19 341.487 225.256 341.427 225.461 cv
341.072 226.668 340.608 227.991 340.165 229.219 cv
340.125 229.327 340.084 229.396 340.008 229.432 cv
339.912 229.471 339.538 229.505 339.3 229.505 cv
339.129 228.836 338.844 227.603 338.589 226.621 cv
338.521 226.894 338.058 228.565 337.881 229.156 cv
337.841 229.294 337.785 229.389 337.683 229.432 cv
337.58 229.463 337.269 229.505 337.028 229.505 cv
336.619 228.21 336.183 226.471 335.706 225.297 cv
335.842 225.236 336.312 225.135 336.538 225.135 cv
336.695 225.135 336.742 225.224 336.851 225.606 cv
336.987 226.11 337.253 227.089 337.526 228.197 cv
337.602 227.841 337.942 226.656 338.229 225.543 cv
338.222 225.461 338.201 225.352 338.187 225.29 cv
338.46 225.19 338.679 225.135 338.911 225.135 cv
cp
f
343.896 225.66 mo
343.309 225.66 342.79 226.137 342.79 227.227 cv
342.79 228.34 343.342 228.926 344.025 228.926 cv
344.741 228.926 345.143 228.325 345.143 227.332 cv
345.143 226.403 344.712 225.66 343.902 225.66 cv
cp
343.984 225.059 mo
345.402 225.059 346.172 226.06 346.172 227.257 cv
346.172 228.489 345.395 229.526 343.949 229.526 cv
342.375 229.526 341.747 228.393 341.747 227.322 cv
341.747 226.035 342.573 225.059 343.977 225.059 cv
cp
f
347.836 227.16 mo
347.993 227.181 348.354 227.16 348.449 227.111 cv
348.539 227.065 348.804 226.894 348.804 226.451 cv
348.804 225.932 348.49 225.686 348.081 225.686 cv
348 225.686 347.903 225.686 347.836 225.7 cv
cp
347.836 229.261 mo
347.836 229.396 347.788 229.424 347.672 229.437 cv
347.474 229.458 347.024 229.464 346.867 229.464 cv
346.881 229.19 346.888 228.791 346.888 228.216 cv
346.888 225.925 li
346.888 225.59 346.888 225.428 346.874 225.245 cv
347.037 225.202 347.794 225.121 348.108 225.121 cv
349.282 225.121 349.8 225.523 349.8 226.362 cv
349.8 226.996 349.267 227.302 348.995 227.432 cv
349.151 227.569 349.356 227.931 349.574 228.318 cv
349.895 228.891 350.079 229.172 350.264 229.376 cv
350.264 229.403 li
350.209 229.444 349.915 229.478 349.642 229.478 cv
349.356 229.478 349.178 229.424 348.995 229.19 cv
348.837 229.001 348.689 228.686 348.401 228.107 cv
348.217 227.741 348.081 227.711 347.932 227.711 cv
347.891 227.711 347.87 227.706 347.836 227.711 cv
cp
f
350.727 226.055 mo
350.727 225.598 350.721 225.32 350.707 225.19 cv
350.842 225.169 351.388 225.135 351.545 225.135 cv
351.683 225.135 351.703 225.21 351.703 225.509 cv
351.703 227.236 li
352.193 226.64 352.951 225.694 353.359 225.108 cv
353.496 225.108 353.687 225.115 353.897 225.16 cv
354.17 225.21 354.163 225.32 354.027 225.515 cv
353.769 225.863 353.12 226.628 352.678 227.165 cv
352.978 227.664 353.891 228.891 354.293 229.348 cv
354.293 229.375 li
354.231 229.416 353.877 229.478 353.522 229.478 cv
353.278 229.478 353.153 229.416 352.923 229.123 cv
352.609 228.727 351.79 227.556 351.703 227.357 cv
351.703 228.572 li
351.703 229.048 351.716 229.272 351.723 229.409 cv
351.6 229.444 351.067 229.463 350.891 229.463 cv
350.781 229.463 350.727 229.444 350.727 229.327 cv
cp
f
302.589 196.391 mo
302.589 193.243 302.543 191.316 302.448 190.376 cv
303.247 190.235 304.845 190 306.02 190 cv
306.537 190 306.725 190.282 306.725 192.585 cv
306.725 216.599 li
307.618 216.88 309.92 216.974 311.894 216.974 cv
314.008 216.974 317.016 216.927 318.849 216.738 cv
318.896 216.833 li
318.708 218.148 317.956 219.228 316.828 219.651 cv
316.217 219.745 314.666 219.84 311.377 219.84 cv
307.57 219.84 304.469 219.605 303.247 219.371 cv
302.589 218.477 li
cp
1 0.914 0.275 0.153 cmyk
f
323.954 189.707 mo
325.223 189.707 326.069 190.58 326.069 191.746 cv
326.069 192.87 325.176 193.868 323.813 193.868 cv
322.544 193.868 321.558 193.161 321.558 191.829 cv
321.558 190.373 322.92 189.707 323.907 189.707 cv
cp
f
325.834 218.209 mo
325.834 219.095 325.552 219.343 324.848 219.44 cv
324.236 219.589 323.062 219.637 321.746 219.687 cv
321.793 217.664 321.887 215.311 321.887 212.449 cv
321.887 204.569 li
321.887 201.56 321.793 200.031 321.699 198.995 cv
322.497 198.699 324.471 198.502 325.176 198.502 cv
325.646 198.502 325.834 198.749 325.834 201.56 cv
cp
f
354.317 215.716 mo
353.518 216.281 352.155 216.703 350.792 216.703 cv
349.194 216.703 347.644 215.998 347.408 213.178 cv
347.221 211.158 347.174 206.083 347.408 201.29 cv
350.792 201.29 350.981 201.29 352.578 201.149 cv
353.424 201.102 354.458 200.913 354.928 198.564 cv
347.456 198.564 li
347.456 197.577 347.55 196.403 347.644 194.899 cv
346.516 195.087 345.859 195.557 345.247 196.073 cv
344.827 196.438 343.625 197.535 342.621 198.572 cv
340.831 198.633 337.906 198.608 336.131 198.608 cv
337.053 191.976 338.26 190.078 340.931 190.078 cv
341.484 190.078 342.174 190.26 342.543 190.396 cv
343.372 190.441 343.833 189.214 343.786 188.442 cv
343.372 188.034 342.221 187.534 340.839 187.534 cv
337.663 187.534 334.014 188.343 332.587 198.608 cv
331.757 198.653 330.929 198.608 330.422 198.608 cv
329.638 198.699 329.033 200.301 328.942 201.211 cv
332.256 201.211 li
331.75 205.298 331.775 205.942 330.992 211.12 cv
329.932 218.479 328.735 221.113 325.558 221.113 cv
324.638 221.113 323.579 220.75 322.796 220.342 cv
322.242 220.704 321.828 222.112 322.61 222.839 cv
323.072 223.339 324.638 223.793 325.88 223.793 cv
329.748 223.793 332.926 221.387 334.261 212.482 cv
334.952 208.031 334.927 207.75 335.756 201.211 cv
336.74 201.211 341.031 201.203 343.415 201.175 cv
343.415 213.508 li
343.415 217.079 345.059 219.71 349.242 219.71 cv
350.886 219.71 352.719 219.239 353.659 218.442 cv
354.505 217.784 354.646 216.749 354.411 215.811 cv
cp
f
290.973 210.169 mo
290.973 212.629 288.978 215.465 286.519 216.503 cv
270.189 223.398 li
267.73 224.437 265.736 223.285 265.736 220.825 cv
265.736 204.494 li
265.736 202.035 267.73 199.2 270.189 198.161 cv
286.519 191.266 li
288.978 190.228 290.973 191.38 290.973 193.84 cv
cp
0.796 0.616 0.02 0 cmyk
f
294.462 196.312 mo
294.462 212.587 li
294.462 215.046 292.468 217.882 290.008 218.92 cv
273.678 225.815 li
272.834 226.172 272.046 226.266 271.373 226.141 cv
271.373 226.196 li
271.373 228.654 273.367 229.807 275.826 228.769 cv
292.157 221.874 li
294.616 220.835 296.61 218 296.61 215.54 cv
296.61 199.21 li
296.61 197.595 295.748 196.55 294.462 196.312 cv
1 0.914 0.275 0.153 cmyk
f
288.256 222.493 mo
286.153 222.493 284.37 221.745 282.905 220.245 cv
281.441 218.746 280.709 216.944 280.709 214.839 cv
280.709 203.746 li
284.676 202.071 li
277.561 196.039 li
271.088 207.807 li
275.328 206.017 li
275.328 214.834 li
275.328 218.363 276.599 221.367 279.139 223.843 cv
280.083 224.762 281.095 225.51 282.175 226.088 cv
290.689 222.493 li
cp
0 0 0 0 cmyk
f
546.996 225.135 mo
547.057 225.135 547.084 225.197 547.126 225.297 cv
547.316 225.911 547.719 227.322 548.08 228.665 cv
548.639 226.934 549.077 225.632 549.226 225.135 cv
549.279 225.135 549.436 225.149 549.566 225.183 cv
549.676 225.21 549.703 225.27 549.648 225.448 cv
549.246 226.668 548.742 228.067 548.332 229.186 cv
548.277 229.327 548.244 229.389 548.183 229.432 cv
548.127 229.463 547.916 229.505 547.787 229.505 cv
547.616 228.886 547.234 227.493 546.825 226.096 cv
546.615 226.82 546.076 228.577 545.904 229.165 cv
545.856 229.327 545.816 229.396 545.734 229.437 cv
545.652 229.471 545.496 229.505 545.365 229.505 cv
544.937 228.135 544.48 226.573 543.975 225.265 cv
544.091 225.201 544.357 225.135 544.48 225.135 cv
544.582 225.135 544.616 225.201 544.732 225.589 cv
544.97 226.368 545.339 227.541 545.64 228.647 cv
545.83 227.971 546.213 226.676 546.6 225.42 cv
546.594 225.365 546.579 225.277 546.567 225.231 cv
546.697 225.176 546.84 225.135 546.99 225.135 cv
cp
f
550.303 226.117 mo
550.303 225.791 550.303 225.515 550.282 225.257 cv
550.418 225.216 550.625 225.177 550.815 225.161 cv
552.547 225.161 li
552.526 225.339 552.465 225.462 552.383 225.532 cv
552.295 225.578 552.145 225.578 551.845 225.578 cv
550.904 225.578 li
550.904 227.024 li
552.491 227.024 li
552.43 227.391 552.295 227.439 552.069 227.439 cv
550.904 227.439 li
550.904 228.995 li
551.047 229.036 551.401 229.049 551.729 229.049 cv
552.034 229.049 552.479 229.042 552.744 229.015 cv
552.751 229.028 li
552.703 229.231 552.594 229.376 552.438 229.437 cv
552.349 229.451 552.096 229.464 551.613 229.464 cv
551.053 229.464 550.57 229.437 550.399 229.396 cv
550.303 229.266 li
cp
f
553.951 229.06 mo
554.039 229.089 554.23 229.11 554.394 229.11 cv
554.959 229.11 555.41 228.816 555.41 228.19 cv
555.41 227.657 555 227.386 554.34 227.386 cv
554.21 227.386 554.053 227.391 553.951 227.412 cv
cp
553.951 227.044 mo
554.148 227.011 554.455 226.996 554.769 227.011 cv
554.967 226.934 555.178 226.656 555.178 226.261 cv
555.178 225.836 554.927 225.509 554.312 225.509 cv
554.21 225.509 554.033 225.523 553.951 225.536 cv
cp
553.357 226.117 mo
553.357 225.755 553.357 225.558 553.337 225.215 cv
553.461 225.19 553.977 225.121 554.4 225.121 cv
555.621 225.121 555.777 225.831 555.777 226.178 cv
555.777 226.585 555.519 226.92 555.199 227.106 cv
555.777 227.26 556.063 227.677 556.063 228.14 cv
556.063 229.036 555.328 229.492 554.367 229.492 cv
554.046 229.492 553.685 229.451 553.357 229.375 cv
cp
f
556.78 225.987 mo
556.78 225.721 556.773 225.544 556.759 225.265 cv
556.89 225.231 557.367 225.176 557.709 225.161 cv
557.892 225.156 559.057 225.161 559.412 225.161 cv
559.343 225.532 559.228 225.674 559.133 225.761 cv
559.037 225.802 558.894 225.802 558.581 225.802 cv
557.756 225.802 li
557.756 227.045 li
559.256 227.045 li
559.167 227.636 559.003 227.685 558.724 227.685 cv
557.756 227.685 li
557.756 228.333 557.761 228.905 557.775 229.41 cv
557.653 229.444 557.265 229.464 556.944 229.464 cv
556.828 229.464 556.78 229.444 556.78 229.328 cv
cp
0.592 0.408 0.035 0 cmyk
f
560.893 227.16 mo
561.05 227.181 561.411 227.16 561.506 227.111 cv
561.594 227.065 561.861 226.894 561.861 226.451 cv
561.861 225.932 561.547 225.686 561.139 225.686 cv
561.057 225.686 560.961 225.686 560.893 225.7 cv
cp
560.893 229.261 mo
560.893 229.396 560.845 229.424 560.729 229.437 cv
560.532 229.458 560.081 229.464 559.924 229.464 cv
559.938 229.19 559.945 228.791 559.945 228.216 cv
559.945 225.925 li
559.945 225.59 559.945 225.428 559.932 225.245 cv
560.095 225.202 560.852 225.121 561.165 225.121 cv
562.339 225.121 562.856 225.523 562.856 226.362 cv
562.856 226.996 562.325 227.302 562.051 227.432 cv
562.207 227.569 562.414 227.931 562.631 228.318 cv
562.953 228.891 563.136 229.172 563.321 229.376 cv
563.321 229.403 li
563.266 229.444 562.973 229.478 562.7 229.478 cv
562.414 229.478 562.235 229.424 562.051 229.19 cv
561.895 229.001 561.746 228.686 561.459 228.107 cv
561.274 227.741 561.139 227.711 560.987 227.711 cv
560.947 227.711 560.926 227.706 560.893 227.711 cv
cp
f
566.148 227.69 mo
565.869 226.881 565.685 226.403 565.611 226.19 cv
565.473 226.594 565.289 227.127 565.079 227.69 cv
cp
564.874 228.325 mo
564.751 228.652 564.56 229.157 564.479 229.362 cv
564.451 229.432 564.397 229.463 564.273 229.463 cv
564.097 229.463 563.748 229.423 563.585 229.376 cv
563.58 229.348 li
563.919 228.516 564.949 226.007 565.221 225.347 cv
565.18 225.224 li
565.48 225.161 565.937 225.135 566.013 225.135 cv
566.074 225.135 566.134 225.169 566.175 225.265 cv
566.49 226.028 566.974 227.311 567.193 227.891 cv
567.471 228.619 567.636 229.042 567.777 229.357 cv
567.771 229.382 li
567.622 229.432 567.07 229.463 566.899 229.463 cv
566.783 229.463 566.721 229.432 566.654 229.24 cv
566.537 228.898 566.449 228.647 566.334 228.325 cv
cp
f
571.857 225.245 mo
571.965 225.177 572.511 225.136 572.695 225.136 cv
572.769 225.136 572.811 225.177 572.837 225.359 cv
573.166 227.856 li
573.26 228.572 573.336 229.077 573.39 229.403 cv
573.268 229.437 572.757 229.464 572.606 229.464 cv
572.511 229.464 572.416 229.433 572.4 229.281 cv
572.368 228.946 572.326 228.552 572.257 227.782 cv
572.115 226.231 li
571.952 226.792 571.611 227.834 571.181 229.131 cv
571.133 229.281 571.072 229.336 570.902 229.369 cv
570.759 229.396 570.582 229.424 570.418 229.424 cv
570.275 228.946 569.695 227.127 569.421 226.247 cv
569.354 227.016 569.195 228.51 569.094 229.349 cv
569.082 229.424 569.046 229.464 568.965 229.464 cv
568.747 229.464 568.372 229.464 568.262 229.403 cv
568.379 228.666 568.625 226.921 568.884 225.352 cv
568.869 225.245 li
569.06 225.202 569.334 225.136 569.714 225.136 cv
569.824 225.129 569.863 225.177 569.968 225.469 cv
570.86 227.992 li
571.146 227.216 571.569 226.028 571.857 225.332 cv
cp
f
574.107 226.117 mo
574.107 225.791 574.107 225.558 574.086 225.257 cv
574.303 225.211 574.652 225.17 574.972 225.161 cv
576.594 225.161 li
576.547 225.536 576.452 225.666 576.37 225.762 cv
576.26 225.803 575.988 225.803 575.68 225.803 cv
575.082 225.803 li
575.082 226.907 li
576.519 226.907 li
576.452 227.432 576.302 227.549 576.056 227.549 cv
575.082 227.549 li
575.082 228.782 li
575.238 228.809 575.394 228.823 575.628 228.823 cv
575.886 228.823 576.418 228.823 576.772 228.798 cv
576.787 228.809 li
576.718 229.151 576.581 229.314 576.396 229.432 cv
576.302 229.451 575.974 229.464 575.421 229.464 cv
574.809 229.464 574.38 229.432 574.216 229.396 cv
574.107 229.261 li
cp
f
580.251 225.135 mo
580.34 225.135 580.387 225.249 580.428 225.381 cv
580.522 225.721 580.822 226.92 581.152 228.271 cv
581.647 226.505 581.881 225.626 582.023 225.135 cv
582.07 225.135 582.316 225.14 582.528 225.16 cv
582.745 225.19 582.82 225.256 582.76 225.461 cv
582.404 226.668 581.941 227.991 581.498 229.219 cv
581.457 229.327 581.416 229.396 581.342 229.432 cv
581.245 229.471 580.871 229.505 580.633 229.505 cv
580.462 228.836 580.177 227.603 579.922 226.621 cv
579.854 226.894 579.391 228.565 579.214 229.156 cv
579.174 229.294 579.118 229.389 579.016 229.432 cv
578.913 229.463 578.602 229.505 578.361 229.505 cv
577.951 228.21 577.516 226.471 577.039 225.297 cv
577.176 225.236 577.645 225.135 577.871 225.135 cv
578.027 225.135 578.075 225.224 578.184 225.606 cv
578.32 226.11 578.586 227.089 578.859 228.197 cv
578.936 227.841 579.275 226.656 579.562 225.543 cv
579.555 225.461 579.533 225.352 579.52 225.29 cv
579.793 225.19 580.012 225.135 580.244 225.135 cv
cp
f
585.229 225.66 mo
584.641 225.66 584.124 226.137 584.124 227.227 cv
584.124 228.34 584.674 228.926 585.358 228.926 cv
586.073 228.926 586.477 228.325 586.477 227.332 cv
586.477 226.403 586.046 225.66 585.234 225.66 cv
cp
585.317 225.059 mo
586.734 225.059 587.505 226.06 587.505 227.257 cv
587.505 228.489 586.728 229.526 585.283 229.526 cv
583.708 229.526 583.081 228.393 583.081 227.322 cv
583.081 226.035 583.906 225.059 585.31 225.059 cv
cp
f
589.17 227.16 mo
589.326 227.181 589.688 227.16 589.783 227.111 cv
589.872 227.065 590.138 226.894 590.138 226.451 cv
590.138 225.932 589.823 225.686 589.414 225.686 cv
589.333 225.686 589.236 225.686 589.17 225.7 cv
cp
589.17 229.261 mo
589.17 229.396 589.121 229.424 589.006 229.437 cv
588.808 229.458 588.357 229.464 588.201 229.464 cv
588.215 229.19 588.221 228.791 588.221 228.216 cv
588.221 225.925 li
588.221 225.59 588.221 225.428 588.207 225.245 cv
588.371 225.202 589.128 225.121 589.441 225.121 cv
590.615 225.121 591.133 225.523 591.133 226.362 cv
591.133 226.996 590.601 227.302 590.328 227.432 cv
590.484 227.569 590.69 227.931 590.908 228.318 cv
591.229 228.891 591.412 229.172 591.598 229.376 cv
591.598 229.403 li
591.543 229.444 591.248 229.478 590.976 229.478 cv
590.69 229.478 590.512 229.424 590.328 229.19 cv
590.171 229.001 590.022 228.686 589.734 228.107 cv
589.551 227.741 589.414 227.711 589.266 227.711 cv
589.225 227.711 589.203 227.706 589.17 227.711 cv
cp
f
592.06 226.055 mo
592.06 225.598 592.055 225.32 592.039 225.19 cv
592.174 225.169 592.72 225.135 592.878 225.135 cv
593.016 225.135 593.035 225.21 593.035 225.509 cv
593.035 227.236 li
593.526 226.64 594.284 225.694 594.693 225.108 cv
594.829 225.108 595.019 225.115 595.23 225.16 cv
595.503 225.21 595.496 225.32 595.36 225.515 cv
595.102 225.863 594.453 226.628 594.01 227.165 cv
594.31 227.664 595.224 228.891 595.625 229.348 cv
595.625 229.375 li
595.565 229.416 595.209 229.478 594.855 229.478 cv
594.612 229.478 594.487 229.416 594.255 229.123 cv
593.943 228.727 593.123 227.556 593.035 227.357 cv
593.035 228.572 li
593.035 229.048 593.048 229.272 593.055 229.409 cv
592.933 229.444 592.401 229.463 592.224 229.463 cv
592.115 229.463 592.06 229.444 592.06 229.327 cv
cp
f
543.922 196.391 mo
543.922 193.243 543.876 191.316 543.781 190.376 cv
544.58 190.235 546.178 190 547.354 190 cv
547.87 190 548.059 190.282 548.059 192.585 cv
548.059 216.599 li
548.951 216.88 551.253 216.974 553.227 216.974 cv
555.342 216.974 558.35 216.927 560.182 216.738 cv
560.229 216.833 li
560.041 218.148 559.289 219.228 558.162 219.651 cv
557.551 219.745 556 219.84 552.711 219.84 cv
548.904 219.84 545.803 219.605 544.58 219.371 cv
543.922 218.477 li
cp
0 0 0 0 cmyk
f
565.287 189.707 mo
566.557 189.707 567.402 190.58 567.402 191.746 cv
567.402 192.87 566.51 193.868 565.146 193.868 cv
563.877 193.868 562.891 193.161 562.891 191.829 cv
562.891 190.373 564.253 189.707 565.24 189.707 cv
cp
f
567.167 218.209 mo
567.167 219.095 566.885 219.343 566.181 219.44 cv
565.569 219.589 564.395 219.637 563.078 219.687 cv
563.126 217.664 563.22 215.311 563.22 212.449 cv
563.22 204.569 li
563.22 201.56 563.126 200.031 563.031 198.995 cv
563.83 198.699 565.805 198.502 566.51 198.502 cv
566.979 198.502 567.167 198.749 567.167 201.56 cv
cp
f
595.65 215.716 mo
594.851 216.281 593.488 216.703 592.125 216.703 cv
590.527 216.703 588.976 215.998 588.741 213.178 cv
588.553 211.158 588.506 206.083 588.741 201.29 cv
592.125 201.29 592.313 201.29 593.911 201.149 cv
594.756 201.102 595.791 200.913 596.26 198.564 cv
588.789 198.564 li
588.789 197.577 588.882 196.403 588.976 194.899 cv
587.849 195.087 587.191 195.557 586.58 196.073 cv
586.16 196.438 584.958 197.535 583.954 198.572 cv
582.164 198.633 579.239 198.608 577.464 198.608 cv
578.385 191.976 579.593 190.078 582.263 190.078 cv
582.816 190.078 583.506 190.26 583.876 190.396 cv
584.705 190.441 585.166 189.214 585.119 188.442 cv
584.705 188.034 583.553 187.534 582.171 187.534 cv
578.996 187.534 575.347 188.343 573.92 198.608 cv
573.089 198.653 572.261 198.608 571.754 198.608 cv
570.97 198.699 570.366 200.301 570.274 201.211 cv
573.588 201.211 li
573.083 205.298 573.107 205.942 572.324 211.12 cv
571.265 218.479 570.068 221.113 566.89 221.113 cv
565.97 221.113 564.912 220.75 564.129 220.342 cv
563.575 220.704 563.161 222.112 563.943 222.839 cv
564.405 223.339 565.97 223.793 567.212 223.793 cv
571.081 223.793 574.258 221.387 575.593 212.482 cv
576.285 208.031 576.259 207.75 577.088 201.211 cv
578.072 201.211 582.364 201.203 584.748 201.175 cv
584.748 213.508 li
584.748 217.079 586.392 219.71 590.574 219.71 cv
592.218 219.71 594.052 219.239 594.992 218.442 cv
595.838 217.784 595.978 216.749 595.744 215.811 cv
cp
f
532.306 210.169 mo
532.306 212.629 530.311 215.465 527.852 216.503 cv
511.522 223.398 li
509.063 224.437 507.069 223.285 507.069 220.825 cv
507.069 204.494 li
507.069 202.035 509.063 199.2 511.522 198.161 cv
527.852 191.266 li
530.311 190.228 532.306 191.38 532.306 193.84 cv
cp
f
535.795 196.312 mo
535.795 212.587 li
535.795 215.046 533.802 217.882 531.342 218.92 cv
515.012 225.815 li
514.167 226.172 513.38 226.266 512.706 226.141 cv
512.706 226.196 li
512.706 228.654 514.701 229.807 517.159 228.769 cv
533.49 221.874 li
535.949 220.835 537.943 218 537.943 215.54 cv
537.943 199.21 li
537.943 197.595 537.082 196.55 535.795 196.312 cv
0.592 0.408 0.035 0 cmyk
f
529.589 222.493 mo
527.486 222.493 525.703 221.745 524.238 220.245 cv
522.774 218.746 522.042 216.944 522.042 214.839 cv
522.042 203.746 li
526.009 202.071 li
518.895 196.039 li
512.421 207.807 li
516.661 206.017 li
516.661 214.834 li
516.661 218.363 517.932 221.367 520.473 223.843 cv
521.416 224.762 522.428 225.51 523.508 226.088 cv
532.022 222.493 li
cp
1 0.914 0.275 0.153 cmyk
f
302.509 351.389 mo
302.509 348.426 302.465 346.614 302.376 345.729 cv
303.128 345.597 304.631 345.375 305.736 345.375 cv
306.222 345.375 306.399 345.641 306.399 347.808 cv
306.399 370.401 li
307.24 370.666 309.405 370.755 311.263 370.755 cv
313.253 370.755 316.082 370.711 317.807 370.534 cv
317.851 370.622 li
317.674 371.86 316.967 372.876 315.906 373.276 cv
315.331 373.363 313.872 373.452 310.776 373.452 cv
307.195 373.452 304.277 373.231 303.128 373.009 cv
302.509 372.17 li
cp
f
325.013 372.125 mo
325.013 372.92 324.749 373.143 324.085 373.23 cv
323.511 373.362 322.406 373.407 321.167 373.451 cv
321.212 371.64 321.3 369.074 321.3 366.51 cv
321.3 358.993 li
321.3 356.296 321.212 354.926 321.123 353.997 cv
321.875 353.731 323.731 353.555 324.395 353.555 cv
324.838 353.555 325.013 353.776 325.013 356.296 cv
cp
323.244 344.357 mo
324.439 344.357 325.234 345.287 325.234 346.525 cv
325.234 347.72 324.395 348.78 323.113 348.78 cv
321.919 348.78 320.99 348.028 320.99 346.613 cv
320.99 345.066 322.272 344.357 323.201 344.357 cv
cp
f
339.382 342.899 mo
340.532 342.899 341.726 343.342 342.124 343.873 cv
342.3 344.712 341.549 346.084 340.62 345.906 cv
340.179 345.773 339.604 345.641 339.117 345.641 cv
336.907 345.641 335.049 347.587 335.138 353.822 cv
335.89 353.822 340.046 353.91 341.106 353.732 cv
340.975 354.706 340.443 355.457 339.913 355.855 cv
339.338 356.296 337.614 356.385 335.094 356.385 cv
335.049 360.895 335.226 370.623 335.226 373.098 cv
334.387 373.319 332.573 373.452 331.955 373.452 cv
331.513 373.452 331.336 373.319 331.336 372.701 cv
331.468 367.969 331.379 362.62 331.379 356.385 cv
329.611 356.341 328.992 355.987 328.992 355.325 cv
329.522 354.706 330.23 354.307 331.379 353.822 cv
331.379 349.002 332.662 346.393 334.518 344.712 cv
336.111 343.297 337.747 342.899 339.338 342.899 cv
cp
f
353.662 370.047 mo
353.885 370.931 353.751 371.904 352.956 372.523 cv
352.072 373.276 350.347 373.717 348.8 373.717 cv
344.865 373.717 343.318 371.241 343.318 367.88 cv
343.318 356.43 li
341.813 356.43 341.195 355.943 341.195 355.5 cv
341.637 354.571 344.378 352.052 345.042 351.477 cv
345.617 350.99 346.235 350.548 347.296 350.372 cv
347.208 351.787 347.12 352.893 347.12 353.821 cv
354.149 353.821 li
353.708 356.03 352.736 356.208 351.939 356.252 cv
350.436 356.385 350.258 356.385 347.075 356.385 cv
346.854 360.895 346.899 365.669 347.075 367.571 cv
347.296 370.225 348.755 370.887 350.258 370.887 cv
351.54 370.887 352.824 370.489 353.575 369.958 cv
cp
f
305.647 377.252 mo
305.708 377.252 305.734 377.313 305.776 377.414 cv
305.966 378.023 306.366 379.427 306.725 380.763 cv
307.281 379.042 307.715 377.746 307.865 377.252 cv
307.919 377.252 308.074 377.265 308.203 377.299 cv
308.313 377.325 308.339 377.386 308.285 377.563 cv
307.884 378.777 307.383 380.166 306.976 381.28 cv
306.922 381.422 306.888 381.483 306.827 381.524 cv
306.772 381.559 306.563 381.599 306.434 381.599 cv
306.264 380.982 305.884 379.599 305.478 378.208 cv
305.267 378.926 304.732 380.676 304.562 381.26 cv
304.514 381.422 304.474 381.49 304.392 381.53 cv
304.311 381.565 304.155 381.599 304.026 381.599 cv
303.599 380.234 303.145 378.682 302.643 377.38 cv
302.758 377.318 303.022 377.252 303.145 377.252 cv
303.246 377.252 303.28 377.318 303.395 377.704 cv
303.633 378.479 303.999 379.645 304.297 380.744 cv
304.487 380.072 304.867 378.784 305.254 377.536 cv
305.246 377.481 305.233 377.394 305.22 377.347 cv
305.349 377.292 305.491 377.252 305.64 377.252 cv
cp
f
308.935 378.228 mo
308.935 377.904 308.935 377.63 308.914 377.374 cv
309.051 377.332 309.255 377.292 309.444 377.278 cv
311.166 377.278 li
311.146 377.456 311.085 377.578 311.004 377.645 cv
310.916 377.693 310.767 377.693 310.469 377.693 cv
309.533 377.693 li
309.533 379.13 li
311.112 379.13 li
311.051 379.497 310.916 379.544 310.692 379.544 cv
309.533 379.544 li
309.533 381.09 li
309.675 381.131 310.027 381.144 310.352 381.144 cv
310.658 381.144 311.099 381.136 311.363 381.111 cv
311.37 381.124 li
311.322 381.327 311.214 381.47 311.059 381.531 cv
310.97 381.544 310.719 381.559 310.238 381.559 cv
309.682 381.559 309.201 381.531 309.031 381.491 cv
308.935 381.361 li
cp
f
312.565 381.158 mo
312.652 381.185 312.841 381.205 313.005 381.205 cv
313.567 381.205 314.016 380.914 314.016 380.29 cv
314.016 379.761 313.608 379.49 312.951 379.49 cv
312.822 379.49 312.666 379.497 312.565 379.517 cv
cp
312.565 379.151 mo
312.76 379.119 313.065 379.103 313.378 379.119 cv
313.575 379.043 313.785 378.763 313.785 378.371 cv
313.785 377.95 313.535 377.625 312.923 377.625 cv
312.822 377.625 312.647 377.639 312.565 377.651 cv
cp
311.974 378.228 mo
311.974 377.87 311.974 377.672 311.954 377.333 cv
312.076 377.306 312.591 377.238 313.011 377.238 cv
314.226 377.238 314.381 377.945 314.381 378.289 cv
314.381 378.696 314.124 379.029 313.805 379.212 cv
314.381 379.367 314.666 379.781 314.666 380.243 cv
314.666 381.132 313.933 381.585 312.979 381.585 cv
312.659 381.585 312.3 381.545 311.974 381.471 cv
cp
f
315.378 378.099 mo
315.378 377.834 315.372 377.66 315.358 377.38 cv
315.488 377.347 315.962 377.292 316.3 377.278 cv
316.484 377.273 317.643 377.278 317.997 377.278 cv
317.927 377.645 317.813 377.787 317.717 377.874 cv
317.623 377.915 317.481 377.915 317.169 377.915 cv
316.348 377.915 li
316.348 379.151 li
317.84 379.151 li
317.752 379.741 317.588 379.788 317.311 379.788 cv
316.348 379.788 li
316.348 380.432 316.356 381.002 316.368 381.504 cv
316.246 381.538 315.859 381.559 315.542 381.559 cv
315.426 381.559 315.378 381.538 315.378 381.422 cv
cp
0.796 0.616 0.02 0 cmyk
f
319.467 379.266 mo
319.624 379.287 319.982 379.266 320.077 379.217 cv
320.166 379.171 320.43 379.001 320.43 378.56 cv
320.43 378.043 320.118 377.8 319.712 377.8 cv
319.631 377.8 319.535 377.8 319.467 377.814 cv
cp
319.467 381.355 mo
319.467 381.491 319.42 381.518 319.305 381.531 cv
319.108 381.55 318.661 381.559 318.504 381.559 cv
318.518 381.286 318.524 380.886 318.524 380.316 cv
318.524 378.039 li
318.524 377.704 318.524 377.542 318.511 377.36 cv
318.674 377.319 319.426 377.238 319.738 377.238 cv
320.905 377.238 321.421 377.639 321.421 378.471 cv
321.421 379.103 320.891 379.408 320.62 379.537 cv
320.776 379.673 320.98 380.033 321.196 380.418 cv
321.516 380.988 321.698 381.266 321.881 381.47 cv
321.881 381.496 li
321.828 381.538 321.536 381.571 321.264 381.571 cv
320.98 381.571 320.803 381.518 320.62 381.286 cv
320.464 381.097 320.315 380.784 320.031 380.207 cv
319.847 379.843 319.712 379.814 319.562 379.814 cv
319.522 379.814 319.501 379.809 319.467 379.814 cv
cp
f
324.695 379.793 mo
324.418 378.987 324.235 378.512 324.16 378.302 cv
324.024 378.701 323.841 379.231 323.632 379.793 cv
cp
323.428 380.425 mo
323.305 380.75 323.115 381.252 323.035 381.455 cv
323.007 381.524 322.953 381.559 322.83 381.559 cv
322.654 381.559 322.308 381.518 322.145 381.47 cv
322.14 381.442 li
322.478 380.614 323.502 378.119 323.773 377.462 cv
323.733 377.34 li
324.031 377.277 324.486 377.252 324.56 377.252 cv
324.621 377.252 324.682 377.284 324.722 377.38 cv
325.034 378.14 325.516 379.416 325.734 379.992 cv
326.011 380.717 326.174 381.136 326.316 381.449 cv
326.31 381.476 li
326.161 381.524 325.612 381.559 325.442 381.559 cv
325.327 381.559 325.266 381.524 325.198 381.334 cv
325.082 380.994 324.994 380.744 324.879 380.425 cv
cp
f
330.373 377.36 mo
330.481 377.293 331.024 377.253 331.207 377.253 cv
331.282 377.253 331.322 377.293 331.349 377.476 cv
331.675 379.958 li
331.77 380.671 331.845 381.172 331.899 381.497 cv
331.777 381.531 331.269 381.559 331.119 381.559 cv
331.024 381.559 330.929 381.525 330.915 381.376 cv
330.882 381.043 330.84 380.65 330.773 379.884 cv
330.631 378.343 li
330.468 378.899 330.128 379.937 329.702 381.226 cv
329.654 381.376 329.593 381.43 329.424 381.464 cv
329.282 381.491 329.104 381.518 328.942 381.518 cv
328.8 381.043 328.223 379.232 327.952 378.357 cv
327.884 379.124 327.727 380.609 327.626 381.443 cv
327.613 381.518 327.579 381.559 327.498 381.559 cv
327.28 381.559 326.908 381.559 326.799 381.497 cv
326.915 380.763 327.159 379.029 327.417 377.468 cv
327.403 377.36 li
327.592 377.319 327.863 377.253 328.243 377.253 cv
328.352 377.245 328.392 377.293 328.495 377.584 cv
329.382 380.093 li
329.667 379.32 330.087 378.14 330.373 377.448 cv
cp
f
332.611 378.228 mo
332.611 377.904 332.611 377.671 332.59 377.374 cv
332.807 377.326 333.153 377.285 333.471 377.278 cv
335.086 377.278 li
335.038 377.651 334.943 377.781 334.861 377.874 cv
334.753 377.915 334.482 377.915 334.176 377.915 cv
333.581 377.915 li
333.581 379.014 li
335.01 379.014 li
334.943 379.538 334.794 379.653 334.55 379.653 cv
333.581 379.653 li
333.581 380.879 li
333.736 380.907 333.892 380.921 334.123 380.921 cv
334.381 380.921 334.909 380.921 335.262 380.894 cv
335.276 380.907 li
335.208 381.246 335.072 381.409 334.888 381.525 cv
334.794 381.544 334.468 381.559 333.918 381.559 cv
333.309 381.559 332.882 381.525 332.719 381.491 cv
332.611 381.355 li
cp
f
338.721 377.252 mo
338.808 377.252 338.856 377.365 338.896 377.496 cv
338.992 377.834 339.29 379.028 339.617 380.371 cv
340.11 378.614 340.342 377.739 340.483 377.252 cv
340.531 377.252 340.775 377.258 340.986 377.277 cv
341.201 377.306 341.277 377.373 341.216 377.577 cv
340.863 378.777 340.403 380.093 339.961 381.314 cv
339.921 381.422 339.88 381.49 339.805 381.524 cv
339.71 381.565 339.337 381.599 339.1 381.599 cv
338.931 380.934 338.646 379.706 338.394 378.73 cv
338.326 379.001 337.866 380.662 337.689 381.252 cv
337.649 381.389 337.595 381.483 337.492 381.524 cv
337.39 381.559 337.079 381.599 336.842 381.599 cv
336.434 380.31 336 378.58 335.526 377.414 cv
335.661 377.353 336.129 377.252 336.353 377.252 cv
336.51 377.252 336.557 377.34 336.666 377.721 cv
336.801 378.222 337.066 379.196 337.337 380.296 cv
337.411 379.943 337.751 378.763 338.036 377.659 cv
338.029 377.577 338.008 377.468 337.994 377.407 cv
338.265 377.306 338.483 377.252 338.714 377.252 cv
cp
f
343.671 377.773 mo
343.088 377.773 342.572 378.248 342.572 379.335 cv
342.572 380.438 343.121 381.022 343.799 381.022 cv
344.512 381.022 344.912 380.425 344.912 379.437 cv
344.912 378.512 344.484 377.773 343.678 377.773 cv
cp
343.758 377.176 mo
345.169 377.176 345.935 378.173 345.935 379.361 cv
345.935 380.588 345.163 381.62 343.725 381.62 cv
342.158 381.62 341.535 380.494 341.535 379.427 cv
341.535 378.147 342.355 377.176 343.752 377.176 cv
cp
f
347.591 379.266 mo
347.747 379.287 348.107 379.266 348.201 379.217 cv
348.29 379.171 348.553 379.001 348.553 378.56 cv
348.553 378.043 348.242 377.8 347.835 377.8 cv
347.754 377.8 347.659 377.8 347.591 377.814 cv
cp
347.591 381.355 mo
347.591 381.491 347.544 381.518 347.429 381.531 cv
347.231 381.55 346.784 381.559 346.628 381.559 cv
346.642 381.286 346.649 380.886 346.649 380.316 cv
346.649 378.039 li
346.649 377.704 346.649 377.542 346.634 377.36 cv
346.797 377.319 347.55 377.238 347.862 377.238 cv
349.029 377.238 349.544 377.639 349.544 378.471 cv
349.544 379.103 349.014 379.408 348.744 379.537 cv
348.9 379.673 349.103 380.033 349.32 380.418 cv
349.639 380.988 349.822 381.266 350.006 381.47 cv
350.006 381.496 li
349.952 381.538 349.659 381.571 349.388 381.571 cv
349.103 381.571 348.927 381.518 348.744 381.286 cv
348.587 381.097 348.439 380.784 348.154 380.207 cv
347.97 379.843 347.835 379.814 347.686 379.814 cv
347.645 379.814 347.626 379.809 347.591 379.814 cv
cp
f
350.466 378.168 mo
350.466 377.712 350.459 377.435 350.445 377.306 cv
350.58 377.284 351.124 377.252 351.279 377.252 cv
351.415 377.252 351.436 377.325 351.436 377.624 cv
351.436 379.34 li
351.923 378.749 352.677 377.808 353.084 377.223 cv
353.219 377.223 353.409 377.231 353.619 377.277 cv
353.89 377.325 353.883 377.435 353.748 377.63 cv
353.49 377.978 352.845 378.736 352.406 379.272 cv
352.704 379.768 353.612 380.987 354.012 381.442 cv
354.012 381.47 li
353.951 381.509 353.599 381.57 353.246 381.57 cv
353.003 381.57 352.88 381.509 352.65 381.219 cv
352.338 380.824 351.524 379.66 351.436 379.462 cv
351.436 380.67 li
351.436 381.144 351.449 381.367 351.455 381.504 cv
351.334 381.538 350.805 381.559 350.628 381.559 cv
350.52 381.559 350.466 381.538 350.466 381.422 cv
cp
f
290.973 362.417 mo
290.973 364.878 288.978 367.713 286.519 368.751 cv
270.189 375.646 li
267.73 376.685 265.736 375.532 265.736 373.073 cv
265.736 356.742 li
265.736 354.283 267.73 351.448 270.189 350.409 cv
286.519 343.515 li
288.978 342.476 290.973 343.628 290.973 346.088 cv
cp
f
294.462 348.56 mo
294.462 364.834 li
294.462 367.293 292.468 370.13 290.008 371.167 cv
273.678 378.063 li
272.834 378.419 272.046 378.513 271.373 378.388 cv
271.373 378.443 li
271.373 380.902 273.367 382.054 275.826 381.017 cv
292.157 374.121 li
294.616 373.083 296.61 370.248 296.61 367.787 cv
296.61 351.457 li
296.61 349.842 295.748 348.797 294.462 348.56 cv
1 0.914 0.275 0.153 cmyk
f
288.256 374.742 mo
286.153 374.742 284.37 373.994 282.905 372.494 cv
281.441 370.995 280.709 369.192 280.709 367.088 cv
280.709 355.994 li
284.676 354.32 li
277.561 348.287 li
271.088 360.056 li
275.328 358.265 li
275.328 367.082 li
275.328 370.611 276.599 373.615 279.139 376.092 cv
280.083 377.011 281.095 377.758 282.175 378.336 cv
290.689 374.742 li
cp
0 0 0 0 cmyk
f
543.57 351.389 mo
543.57 348.426 543.525 346.614 543.436 345.729 cv
544.189 345.597 545.691 345.375 546.797 345.375 cv
547.283 345.375 547.46 345.641 547.46 347.808 cv
547.46 370.401 li
548.3 370.666 550.466 370.755 552.324 370.755 cv
554.314 370.755 557.142 370.711 558.868 370.534 cv
558.912 370.622 li
558.734 371.86 558.027 372.876 556.966 373.276 cv
556.392 373.363 554.932 373.452 551.837 373.452 cv
548.256 373.452 545.338 373.231 544.189 373.009 cv
543.57 372.17 li
cp
f
566.074 372.125 mo
566.074 372.92 565.809 373.143 565.146 373.23 cv
564.572 373.362 563.467 373.407 562.227 373.451 cv
562.272 371.64 562.36 369.074 562.36 366.51 cv
562.36 358.993 li
562.36 356.296 562.272 354.926 562.183 353.997 cv
562.935 353.731 564.792 353.555 565.455 353.555 cv
565.898 353.555 566.074 353.776 566.074 356.296 cv
cp
564.304 344.357 mo
565.5 344.357 566.295 345.287 566.295 346.525 cv
566.295 347.72 565.455 348.78 564.174 348.78 cv
562.979 348.78 562.051 348.028 562.051 346.613 cv
562.051 345.066 563.333 344.357 564.261 344.357 cv
cp
f
580.442 342.899 mo
581.592 342.899 582.787 343.342 583.183 343.873 cv
583.361 344.712 582.609 346.084 581.679 345.906 cv
581.239 345.773 580.664 345.641 580.177 345.641 cv
577.966 345.641 576.109 347.587 576.199 353.822 cv
576.95 353.822 581.105 353.91 582.166 353.732 cv
582.035 354.706 581.504 355.457 580.972 355.855 cv
580.398 356.296 578.673 356.385 576.154 356.385 cv
576.109 360.895 576.286 370.623 576.286 373.098 cv
575.447 373.319 573.633 373.452 573.015 373.452 cv
572.573 373.452 572.396 373.319 572.396 372.701 cv
572.529 367.969 572.439 362.62 572.439 356.385 cv
570.671 356.341 570.052 355.987 570.052 355.325 cv
570.582 354.706 571.291 354.307 572.439 353.822 cv
572.439 349.002 573.722 346.393 575.578 344.712 cv
577.171 343.297 578.806 342.899 580.398 342.899 cv
cp
f
594.723 370.047 mo
594.946 370.931 594.813 371.904 594.018 372.523 cv
593.133 373.276 591.408 373.717 589.862 373.717 cv
585.926 373.717 584.379 371.241 584.379 367.88 cv
584.379 356.43 li
582.874 356.43 582.256 355.943 582.256 355.5 cv
582.698 354.571 585.44 352.052 586.103 351.477 cv
586.678 350.99 587.296 350.548 588.358 350.372 cv
588.269 351.787 588.181 352.893 588.181 353.821 cv
595.21 353.821 li
594.769 356.03 593.797 356.208 593 356.252 cv
591.496 356.385 591.319 356.385 588.136 356.385 cv
587.915 360.895 587.96 365.669 588.136 367.571 cv
588.358 370.225 589.817 370.887 591.319 370.887 cv
592.602 370.887 593.885 370.489 594.635 369.958 cv
cp
f
546.707 377.252 mo
546.768 377.252 546.795 377.313 546.836 377.414 cv
547.026 378.023 547.426 379.427 547.785 380.763 cv
548.342 379.042 548.775 377.746 548.926 377.252 cv
548.979 377.252 549.135 377.265 549.264 377.299 cv
549.373 377.325 549.4 377.386 549.346 377.563 cv
548.944 378.777 548.443 380.166 548.036 381.28 cv
547.982 381.422 547.948 381.483 547.888 381.524 cv
547.832 381.559 547.623 381.599 547.494 381.599 cv
547.324 380.982 546.944 379.599 546.538 378.208 cv
546.327 378.926 545.793 380.676 545.622 381.26 cv
545.574 381.422 545.534 381.49 545.453 381.53 cv
545.371 381.565 545.215 381.599 545.087 381.599 cv
544.66 380.234 544.205 378.682 543.703 377.38 cv
543.818 377.318 544.083 377.252 544.205 377.252 cv
544.307 377.252 544.341 377.318 544.455 377.704 cv
544.693 378.479 545.06 379.645 545.357 380.744 cv
545.547 380.072 545.928 378.784 546.314 377.536 cv
546.307 377.481 546.293 377.394 546.28 377.347 cv
546.41 377.292 546.551 377.252 546.7 377.252 cv
cp
f
549.996 378.228 mo
549.996 377.904 549.996 377.63 549.975 377.374 cv
550.111 377.332 550.316 377.292 550.505 377.278 cv
552.227 377.278 li
552.207 377.456 552.146 377.578 552.064 377.645 cv
551.976 377.693 551.828 377.693 551.529 377.693 cv
550.594 377.693 li
550.594 379.13 li
552.174 379.13 li
552.111 379.497 551.976 379.544 551.753 379.544 cv
550.594 379.544 li
550.594 381.09 li
550.736 381.131 551.088 381.144 551.414 381.144 cv
551.719 381.144 552.16 381.136 552.424 381.111 cv
552.431 381.124 li
552.383 381.327 552.275 381.47 552.12 381.531 cv
552.031 381.544 551.78 381.559 551.299 381.559 cv
550.742 381.559 550.261 381.531 550.092 381.491 cv
549.996 381.361 li
cp
f
553.625 381.158 mo
553.713 381.185 553.902 381.205 554.065 381.205 cv
554.628 381.205 555.076 380.914 555.076 380.29 cv
555.076 379.761 554.668 379.49 554.012 379.49 cv
553.883 379.49 553.727 379.497 553.625 379.517 cv
cp
553.625 379.151 mo
553.82 379.119 554.126 379.103 554.438 379.119 cv
554.635 379.043 554.846 378.763 554.846 378.371 cv
554.846 377.95 554.596 377.625 553.984 377.625 cv
553.883 377.625 553.707 377.639 553.625 377.651 cv
cp
553.035 378.228 mo
553.035 377.87 553.035 377.672 553.014 377.333 cv
553.137 377.306 553.651 377.238 554.071 377.238 cv
555.286 377.238 555.441 377.945 555.441 378.289 cv
555.441 378.696 555.185 379.029 554.865 379.212 cv
555.441 379.367 555.727 379.781 555.727 380.243 cv
555.727 381.132 554.994 381.585 554.039 381.585 cv
553.719 381.585 553.36 381.545 553.035 381.471 cv
cp
f
556.438 378.099 mo
556.438 377.834 556.431 377.66 556.418 377.38 cv
556.548 377.347 557.022 377.292 557.361 377.278 cv
557.544 377.273 558.703 377.278 559.056 377.278 cv
558.988 377.645 558.873 377.787 558.777 377.874 cv
558.683 377.915 558.542 377.915 558.229 377.915 cv
557.408 377.915 li
557.408 379.151 li
558.9 379.151 li
558.813 379.741 558.648 379.788 558.371 379.788 cv
557.408 379.788 li
557.408 380.432 557.417 381.002 557.427 381.504 cv
557.306 381.538 556.919 381.559 556.602 381.559 cv
556.486 381.559 556.438 381.538 556.438 381.422 cv
cp
0.592 0.408 0.035 0 cmyk
f
560.527 379.266 mo
560.685 379.287 561.043 379.266 561.138 379.217 cv
561.226 379.171 561.49 379.001 561.49 378.56 cv
561.49 378.043 561.178 377.8 560.773 377.8 cv
560.691 377.8 560.595 377.8 560.527 377.814 cv
cp
560.527 381.355 mo
560.527 381.491 560.48 381.518 560.365 381.531 cv
560.169 381.55 559.721 381.559 559.564 381.559 cv
559.579 381.286 559.585 380.886 559.585 380.316 cv
559.585 378.039 li
559.585 377.704 559.585 377.542 559.572 377.36 cv
559.734 377.319 560.487 377.238 560.798 377.238 cv
561.966 377.238 562.481 377.639 562.481 378.471 cv
562.481 379.103 561.952 379.408 561.681 379.537 cv
561.836 379.673 562.041 380.033 562.257 380.418 cv
562.576 380.988 562.758 381.266 562.941 381.47 cv
562.941 381.496 li
562.888 381.538 562.596 381.571 562.325 381.571 cv
562.041 381.571 561.863 381.518 561.681 381.286 cv
561.525 381.097 561.376 380.784 561.091 380.207 cv
560.908 379.843 560.773 379.814 560.623 379.814 cv
560.582 379.814 560.562 379.809 560.527 379.814 cv
cp
f
565.756 379.793 mo
565.479 378.987 565.296 378.512 565.221 378.302 cv
565.085 378.701 564.902 379.231 564.693 379.793 cv
cp
564.488 380.425 mo
564.366 380.75 564.176 381.252 564.096 381.455 cv
564.068 381.524 564.014 381.559 563.891 381.559 cv
563.715 381.559 563.369 381.518 563.206 381.47 cv
563.201 381.442 li
563.539 380.614 564.563 378.119 564.834 377.462 cv
564.793 377.34 li
565.092 377.277 565.547 377.252 565.621 377.252 cv
565.682 377.252 565.743 377.284 565.783 377.38 cv
566.096 378.14 566.577 379.416 566.795 379.992 cv
567.072 380.717 567.235 381.136 567.377 381.449 cv
567.371 381.476 li
567.222 381.524 566.672 381.559 566.503 381.559 cv
566.388 381.559 566.326 381.524 566.26 381.334 cv
566.143 380.994 566.055 380.744 565.94 380.425 cv
cp
f
571.434 377.36 mo
571.541 377.293 572.084 377.253 572.268 377.253 cv
572.342 377.253 572.383 377.293 572.409 377.476 cv
572.736 379.958 li
572.83 380.671 572.905 381.172 572.959 381.497 cv
572.837 381.531 572.329 381.559 572.179 381.559 cv
572.084 381.559 571.989 381.525 571.975 381.376 cv
571.943 381.043 571.901 380.65 571.833 379.884 cv
571.692 378.343 li
571.529 378.899 571.189 379.937 570.762 381.226 cv
570.714 381.376 570.653 381.43 570.485 381.464 cv
570.342 381.491 570.164 381.518 570.002 381.518 cv
569.86 381.043 569.284 379.232 569.012 378.357 cv
568.945 379.124 568.788 380.609 568.687 381.443 cv
568.674 381.518 568.639 381.559 568.558 381.559 cv
568.34 381.559 567.968 381.559 567.86 381.497 cv
567.975 380.763 568.219 379.029 568.477 377.468 cv
568.463 377.36 li
568.653 377.319 568.924 377.253 569.303 377.253 cv
569.413 377.245 569.453 377.293 569.555 377.584 cv
570.443 380.093 li
570.728 379.32 571.148 378.14 571.434 377.448 cv
cp
f
573.672 378.228 mo
573.672 377.904 573.672 377.671 573.651 377.374 cv
573.867 377.326 574.213 377.285 574.531 377.278 cv
576.147 377.278 li
576.099 377.651 576.004 377.781 575.922 377.874 cv
575.814 377.915 575.542 377.915 575.236 377.915 cv
574.642 377.915 li
574.642 379.014 li
576.07 379.014 li
576.004 379.538 575.854 379.653 575.61 379.653 cv
574.642 379.653 li
574.642 380.879 li
574.796 380.907 574.952 380.921 575.184 380.921 cv
575.442 380.921 575.969 380.921 576.322 380.894 cv
576.336 380.907 li
576.269 381.246 576.133 381.409 575.948 381.525 cv
575.854 381.544 575.528 381.559 574.979 381.559 cv
574.369 381.559 573.943 381.525 573.779 381.491 cv
573.672 381.355 li
cp
f
579.781 377.252 mo
579.869 377.252 579.917 377.365 579.957 377.496 cv
580.052 377.834 580.35 379.028 580.677 380.371 cv
581.171 378.614 581.402 377.739 581.544 377.252 cv
581.592 377.252 581.836 377.258 582.047 377.277 cv
582.261 377.306 582.338 377.373 582.277 377.577 cv
581.924 378.777 581.463 380.093 581.021 381.314 cv
580.981 381.422 580.94 381.49 580.866 381.524 cv
580.771 381.565 580.397 381.599 580.161 381.599 cv
579.992 380.934 579.707 379.706 579.455 378.73 cv
579.386 379.001 578.926 380.662 578.75 381.252 cv
578.71 381.389 578.655 381.483 578.552 381.524 cv
578.451 381.559 578.14 381.599 577.902 381.599 cv
577.494 380.31 577.06 378.58 576.587 377.414 cv
576.722 377.353 577.189 377.252 577.414 377.252 cv
577.57 377.252 577.618 377.34 577.726 377.721 cv
577.861 378.222 578.127 379.196 578.397 380.296 cv
578.472 379.943 578.812 378.763 579.096 377.659 cv
579.09 377.577 579.068 377.468 579.054 377.407 cv
579.326 377.306 579.544 377.252 579.774 377.252 cv
cp
f
584.732 377.773 mo
584.148 377.773 583.632 378.248 583.632 379.335 cv
583.632 380.438 584.181 381.022 584.86 381.022 cv
585.572 381.022 585.972 380.425 585.972 379.437 cv
585.972 378.512 585.545 377.773 584.738 377.773 cv
cp
584.819 377.176 mo
586.23 377.176 586.996 378.173 586.996 379.361 cv
586.996 380.588 586.223 381.62 584.786 381.62 cv
583.218 381.62 582.595 380.494 582.595 379.427 cv
582.595 378.147 583.416 377.176 584.812 377.176 cv
cp
f
588.651 379.266 mo
588.807 379.287 589.167 379.266 589.261 379.217 cv
589.349 379.171 589.613 379.001 589.613 378.56 cv
589.613 378.043 589.302 377.8 588.894 377.8 cv
588.814 377.8 588.718 377.8 588.651 377.814 cv
cp
588.651 381.355 mo
588.651 381.491 588.603 381.518 588.489 381.531 cv
588.291 381.55 587.843 381.559 587.688 381.559 cv
587.702 381.286 587.709 380.886 587.709 380.316 cv
587.709 378.039 li
587.709 377.704 587.709 377.542 587.694 377.36 cv
587.857 377.319 588.611 377.238 588.922 377.238 cv
590.089 377.238 590.604 377.639 590.604 378.471 cv
590.604 379.103 590.074 379.408 589.804 379.537 cv
589.96 379.673 590.163 380.033 590.38 380.418 cv
590.699 380.988 590.882 381.266 591.066 381.47 cv
591.066 381.496 li
591.011 381.538 590.719 381.571 590.448 381.571 cv
590.163 381.571 589.987 381.518 589.804 381.286 cv
589.647 381.097 589.5 380.784 589.214 380.207 cv
589.031 379.843 588.894 379.814 588.746 379.814 cv
588.705 379.814 588.685 379.809 588.651 379.814 cv
cp
f
591.527 378.168 mo
591.527 377.712 591.519 377.435 591.506 377.306 cv
591.64 377.284 592.184 377.252 592.34 377.252 cv
592.476 377.252 592.496 377.325 592.496 377.624 cv
592.496 379.34 li
592.984 378.749 593.738 377.808 594.144 377.223 cv
594.28 377.223 594.47 377.231 594.679 377.277 cv
594.951 377.325 594.943 377.435 594.808 377.63 cv
594.55 377.978 593.906 378.736 593.466 379.272 cv
593.764 379.768 594.673 380.987 595.073 381.442 cv
595.073 381.47 li
595.011 381.509 594.66 381.57 594.306 381.57 cv
594.063 381.57 593.94 381.509 593.711 381.219 cv
593.398 380.824 592.584 379.66 592.496 379.462 cv
592.496 380.67 li
592.496 381.144 592.509 381.367 592.515 381.504 cv
592.394 381.538 591.865 381.559 591.688 381.559 cv
591.581 381.559 591.527 381.538 591.527 381.422 cv
cp
f
532.033 362.417 mo
532.033 364.878 530.039 367.713 527.58 368.751 cv
511.25 375.646 li
508.79 376.685 506.796 375.532 506.796 373.073 cv
506.796 356.742 li
506.796 354.283 508.79 351.448 511.25 350.409 cv
527.58 343.515 li
530.039 342.476 532.033 343.628 532.033 346.088 cv
cp
0 0 0 0 cmyk
f
535.523 348.56 mo
535.523 364.834 li
535.523 367.293 533.529 370.13 531.068 371.167 cv
514.739 378.063 li
513.894 378.419 513.107 378.513 512.433 378.388 cv
512.433 378.443 li
512.433 380.902 514.427 382.054 516.886 381.017 cv
533.217 374.121 li
535.677 373.083 537.671 370.248 537.671 367.787 cv
537.671 351.457 li
537.671 349.842 536.808 348.797 535.523 348.56 cv
0.592 0.408 0.035 0 cmyk
f
529.316 374.742 mo
527.213 374.742 525.43 373.994 523.965 372.494 cv
522.502 370.995 521.769 369.192 521.769 367.088 cv
521.769 355.994 li
525.736 354.32 li
518.621 348.287 li
512.148 360.056 li
516.388 358.265 li
516.388 367.082 li
516.388 370.611 517.66 373.615 520.199 376.092 cv
521.143 377.011 522.156 377.758 523.235 378.336 cv
531.749 374.742 li
cp
1 0.914 0.275 0.153 cmyk
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
